grammar com.ufcg.compiler.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.ufcg.com/compiler/Go"

Init:
	elements+=GoDecl*
;

BOOL_OP:
	and="&" | or="||"
;

BOOLEAN_VALUE:
	=>verdadeiro="true" | =>falso="false"
;

GoDecl:
	var=VarDecl | func=FunctionType | expressao=EXPRESSAOLINHA
;

ForDecl:
	"for" (rangeExp=RangeDecl) "{" exp=EXPRESSAOLINHA "}";

RangeDecl:
	idList+=IDList ( igual=IGUAL |  op= PONTOSIGUAL ) "range" expr=Terminals::ID
;

IDList:
	idList += Terminals::ID |  idList += Terminals::ID "," list+=IDList
;

VarDecl:
	signature=SignatureDel ((atribuicao=IGUAL| pront=PONTOSIGUAL)((array=ArrayType)? | expressao=EXPRESSAO))?
	;

Assignment:
	{Assignment} id=Terminals::ID igual=IGUAL expressao=EXPRESSAO
;

SignatureDel:
	(tipoDecl=TIPO)? id=Terminals::ID (type = Types)?
;

Assigment:
	Terminals::ID ("[" qtd = NUMERO "]")? (igual=IGUAL | dois=PONTOSIGUAL) exp=EXPRESSAOLINHA
>>>>>>> 4f35aef6f95c28d1a198451ff58159d38ca0a2b9
;


TIPO:
	variavel=Var | constante=Const
;

Var:
	var="var"
;

Const:
	const="const"
;

IGUAL:
	igual="="
;

PONTOSIGUAL:
	op=":="
;

EXPRESSAOLINHA:
	exp=EXPRESSAO explinha=EXPRESSAOLINHA | exp=EXPRESSAO
;

EXPRESSAO:
<<<<<<< HEAD
    {EXPRESSAO} boolexp = BOOL_EXP | declFunction=FunctionType | variaveis=VarDecl | basic=LITERAIS_BASICOS
=======
    binary_exp = BINARY_EXP | declFunction=FunctionType | assigment=Assigment | variaveis=VarDecl | for=ForDecl |
    basic=LITERAIS_BASICOS | arrayValue = ArrayValue 
;

ArrayValue:
	"{" lit = LiteraisList  "}"
;

LiteraisList:
	lit+=LITERAIS_BASICOS | lit+=LITERAIS_BASICOS "," lit += LiteraisList
>>>>>>> 4f35aef6f95c28d1a198451ff58159d38ca0a2b9
;

LITERAIS_BASICOS:
	numero=NUMERO | string=STRING_DECL | booleano = BOOLEAN_VALUE
;

BINARY_EXP:
	basic=LITERAIS_BASICOS (bool=BOOL_OP | arit= ARIT_OP) binabasic=BINARY_EXP | unique_basic=LITERAIS_BASICOS
;

//FUNCAO:
//	func="func" nome=Terminals::ID ABRE_PARENTESES=ABRE_PARENTESES PARAMETERS_LIST=PARAMETERS_LIST? 
//	FECHA_PARENTESES=FECHA_PARENTESES bloco=BLOCK
//;

FunctionType: "func" nome=Terminals::ID assinatura=Signature bloco=BLOCK?;
Signature: Parameters retorno=Result?;
Result: {Result} parametros=Parameters | tipo=Types;
Parameters: {Parameters} ABRE_PARENTESES PARAMETERS_LIST? FECHA_PARENTESES;
ABRE_PARENTESES:
	"("
;

FECHA_PARENTESES:
	")"
;

BLOCK:
	{BLOCK} "{" listaDeComandos+=EXPRESSAO* "}"
;

PARAMETERS_LIST:
	PARAMETER ("," PARAMETER+=PARAMETER)*
;

PARAMETER:
	id=Terminals::ID tipo=Types
;

Types:
<<<<<<< HEAD
	string="string" | int="int" | float="float" | boolean="bool"
=======
	basic=BasicType | array = ArrayType 
;

ArrayType:
	"[" (qtd = NUMERO)? "]"  basic=BasicType
;

BasicType:
	"string" | "int" | "float" | "bool"
>>>>>>> 4f35aef6f95c28d1a198451ff58159d38ca0a2b9
;

terminal NUMERO:
	Terminals::INT
;

terminal STRING_DECL:
	'"' (Terminals::ID | NUMERO)* '"'
;

<<<<<<< HEAD
=======
BOOL_OP:
	'&&' | '||'
;

ARIT_OP:
	'+' | '-' | '*' | '/' | '^'
;

BOOLEAN_VALUE:
	"true" | "false"
;

KEYWORD: BOOLEAN_VALUE;


>>>>>>> 4f35aef6f95c28d1a198451ff58159d38ca0a2b9
