/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package com.ufcg.compiler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ufcg.compiler.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ufcg.compiler.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Init";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleInit
entryRuleInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitRule()); }
	iv_ruleInit=ruleInit
	{ $current=$iv_ruleInit.current; }
	EOF;

// Rule Init
ruleInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInitAccess().getElementsGoDeclParserRuleCall_0());
			}
			lv_elements_0_0=ruleGoDecl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getInitRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"com.ufcg.compiler.Go.GoDecl");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleBOOL_OP
entryRuleBOOL_OP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOL_OPRule()); }
	iv_ruleBOOL_OP=ruleBOOL_OP
	{ $current=$iv_ruleBOOL_OP.current; }
	EOF;

// Rule BOOL_OP
ruleBOOL_OP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_and_0_0='&'
				{
					newLeafNode(lv_and_0_0, grammarAccess.getBOOL_OPAccess().getAndAmpersandKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOL_OPRule());
					}
					setWithLastConsumed($current, "and", lv_and_0_0, "&");
				}
			)
		)
		    |
		(
			(
				lv_or_1_0='||'
				{
					newLeafNode(lv_or_1_0, grammarAccess.getBOOL_OPAccess().getOrVerticalLineVerticalLineKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOL_OPRule());
					}
					setWithLastConsumed($current, "or", lv_or_1_0, "||");
				}
			)
		)
	)
;

// Entry rule entryRuleBOOLEAN_VALUE
entryRuleBOOLEAN_VALUE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEAN_VALUERule()); }
	iv_ruleBOOLEAN_VALUE=ruleBOOLEAN_VALUE
	{ $current=$iv_ruleBOOLEAN_VALUE.current; }
	EOF;

// Rule BOOLEAN_VALUE
ruleBOOLEAN_VALUE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				'true'
			)
			)=>
			(
				lv_verdadeiro_0_0='true'
				{
					newLeafNode(lv_verdadeiro_0_0, grammarAccess.getBOOLEAN_VALUEAccess().getVerdadeiroTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOLEAN_VALUERule());
					}
					setWithLastConsumed($current, "verdadeiro", lv_verdadeiro_0_0, "true");
				}
			)
		)
		    |
		(
			((
				'false'
			)
			)=>
			(
				lv_falso_1_0='false'
				{
					newLeafNode(lv_falso_1_0, grammarAccess.getBOOLEAN_VALUEAccess().getFalsoFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOLEAN_VALUERule());
					}
					setWithLastConsumed($current, "falso", lv_falso_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleGoDecl
entryRuleGoDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoDeclRule()); }
	iv_ruleGoDecl=ruleGoDecl
	{ $current=$iv_ruleGoDecl.current; }
	EOF;

// Rule GoDecl
ruleGoDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGoDeclAccess().getVarVarDeclParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoDeclRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"com.ufcg.compiler.Go.VarDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGoDeclAccess().getFuncFunctionTypeParserRuleCall_1_0());
				}
				lv_func_1_0=ruleFunctionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoDeclRule());
					}
					set(
						$current,
						"func",
						lv_func_1_0,
						"com.ufcg.compiler.Go.FunctionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGoDeclAccess().getExpressaoEXPRESSAOLINHAParserRuleCall_2_0());
				}
				lv_expressao_2_0=ruleEXPRESSAOLINHA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoDeclRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_2_0,
						"com.ufcg.compiler.Go.EXPRESSAOLINHA");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForDecl
entryRuleForDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForDeclRule()); }
	iv_ruleForDecl=ruleForDecl
	{ $current=$iv_ruleForDecl.current; }
	EOF;

// Rule ForDecl
ruleForDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForDeclAccess().getForKeyword_0());
		}
		(
			((
				ruleForClause
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getForDeclAccess().getClauseForClauseParserRuleCall_1_0());
				}
				lv_clause_1_0=ruleForClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForDeclRule());
					}
					set(
						$current,
						"clause",
						lv_clause_1_0,
						"com.ufcg.compiler.Go.ForClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getForDeclAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForDeclAccess().getExpEXPRESSAOLINHAParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleEXPRESSAOLINHA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForDeclRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"com.ufcg.compiler.Go.EXPRESSAOLINHA");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getForDeclAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleForClause
entryRuleForClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleForClause=ruleForClause
	{ $current=$iv_ruleForClause.current; }
	EOF;

// Rule ForClause
ruleForClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getForClauseAccess().getForClauseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getInitInitStmtParserRuleCall_1_0());
				}
				lv_init_1_0=ruleInitStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"init",
						lv_init_1_0,
						"com.ufcg.compiler.Go.InitStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getForClauseAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getConditionConditionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"com.ufcg.compiler.Go.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getForClauseAccess().getSemicolonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getPostPostStmtParserRuleCall_5_0());
				}
				lv_post_5_0=rulePostStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"post",
						lv_post_5_0,
						"com.ufcg.compiler.Go.PostStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleInitStmt
entryRuleInitStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitStmtRule()); }
	iv_ruleInitStmt=ruleInitStmt
	{ $current=$iv_ruleInitStmt.current; }
	EOF;

// Rule InitStmt
ruleInitStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInitStmtAccess().getDeclGoDeclParserRuleCall_0());
			}
			lv_decl_0_0=ruleGoDecl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getInitStmtRule());
				}
				set(
					$current,
					"decl",
					lv_decl_0_0,
					"com.ufcg.compiler.Go.GoDecl");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePostStmt
entryRulePostStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostStmtRule()); }
	iv_rulePostStmt=rulePostStmt
	{ $current=$iv_rulePostStmt.current; }
	EOF;

// Rule PostStmt
rulePostStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPostStmtAccess().getDeclGoDeclParserRuleCall_0());
			}
			lv_decl_0_0=ruleGoDecl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPostStmtRule());
				}
				set(
					$current,
					"decl",
					lv_decl_0_0,
					"com.ufcg.compiler.Go.GoDecl");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getExpr1EXPRESSAOParserRuleCall_0_0());
				}
				lv_expr1_0_0=ruleEXPRESSAO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"expr1",
						lv_expr1_0_0,
						"com.ufcg.compiler.Go.EXPRESSAO");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getComparadorCOMPARISONParserRuleCall_1_0());
				}
				lv_comparador_1_0=ruleCOMPARISON
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"comparador",
						lv_comparador_1_0,
						"com.ufcg.compiler.Go.COMPARISON");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getExpr2EXPRESSAOParserRuleCall_2_0());
				}
				lv_expr2_2_0=ruleEXPRESSAO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"expr2",
						lv_expr2_2_0,
						"com.ufcg.compiler.Go.EXPRESSAO");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIDList
entryRuleIDList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIDListRule()); }
	iv_ruleIDList=ruleIDList
	{ $current=$iv_ruleIDList.current; }
	EOF;

// Rule IDList
ruleIDList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_idList_0_0=RULE_ID
				{
					newLeafNode(lv_idList_0_0, grammarAccess.getIDListAccess().getIdListIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIDListRule());
					}
					addWithLastConsumed(
						$current,
						"idList",
						lv_idList_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_idList_1_0=RULE_ID
					{
						newLeafNode(lv_idList_1_0, grammarAccess.getIDListAccess().getIdListIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIDListRule());
						}
						addWithLastConsumed(
							$current,
							"idList",
							lv_idList_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getIDListAccess().getCommaKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIDListAccess().getListIDListParserRuleCall_1_2_0());
					}
					lv_list_3_0=ruleIDList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIDListRule());
						}
						add(
							$current,
							"list",
							lv_list_3_0,
							"com.ufcg.compiler.Go.IDList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_ruleVarDecl=ruleVarDecl
	{ $current=$iv_ruleVarDecl.current; }
	EOF;

// Rule VarDecl
ruleVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclAccess().getSignatureSignatureDelParserRuleCall_0_0());
				}
				lv_signature_0_0=ruleSignatureDel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclRule());
					}
					set(
						$current,
						"signature",
						lv_signature_0_0,
						"com.ufcg.compiler.Go.SignatureDel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVarDeclAccess().getAtribuicaoIGUALParserRuleCall_1_0_0_0());
						}
						lv_atribuicao_1_0=ruleIGUAL
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarDeclRule());
							}
							set(
								$current,
								"atribuicao",
								lv_atribuicao_1_0,
								"com.ufcg.compiler.Go.IGUAL");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getVarDeclAccess().getProntPONTOSIGUALParserRuleCall_1_0_1_0());
						}
						lv_pront_2_0=rulePONTOSIGUAL
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarDeclRule());
							}
							set(
								$current,
								"pront",
								lv_pront_2_0,
								"com.ufcg.compiler.Go.PONTOSIGUAL");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getArrayArrayTypeParserRuleCall_1_1_0());
					}
					lv_array_3_0=ruleArrayType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						set(
							$current,
							"array",
							lv_array_3_0,
							"com.ufcg.compiler.Go.ArrayType");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getExpressaoEXPRESSAOParserRuleCall_1_2_0());
					}
					lv_expressao_4_0=ruleEXPRESSAO
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						set(
							$current,
							"expressao",
							lv_expressao_4_0,
							"com.ufcg.compiler.Go.EXPRESSAO");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSignatureDel
entryRuleSignatureDel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureDelRule()); }
	iv_ruleSignatureDel=ruleSignatureDel
	{ $current=$iv_ruleSignatureDel.current; }
	EOF;

// Rule SignatureDel
ruleSignatureDel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureDelAccess().getTipoDeclTIPOParserRuleCall_0_0());
				}
				lv_tipoDecl_0_0=ruleTIPO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureDelRule());
					}
					set(
						$current,
						"tipoDecl",
						lv_tipoDecl_0_0,
						"com.ufcg.compiler.Go.TIPO");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getSignatureDelAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignatureDelRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureDelAccess().getTypeTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureDelRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"com.ufcg.compiler.Go.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getAssignmentAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_qtd_2_0=RULE_NUMERO
					{
						newLeafNode(lv_qtd_2_0, grammarAccess.getAssignmentAccess().getQtdNUMEROTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"qtd",
							lv_qtd_2_0,
							"com.ufcg.compiler.Go.NUMERO");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getIgualIGUALParserRuleCall_2_0_0());
					}
					lv_igual_4_0=ruleIGUAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"igual",
							lv_igual_4_0,
							"com.ufcg.compiler.Go.IGUAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getDoisPONTOSIGUALParserRuleCall_2_1_0());
					}
					lv_dois_5_0=rulePONTOSIGUAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"dois",
							lv_dois_5_0,
							"com.ufcg.compiler.Go.PONTOSIGUAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressaoEXPRESSAOLINHAParserRuleCall_3_0());
				}
				lv_expressao_6_0=ruleEXPRESSAOLINHA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expressao",
						lv_expressao_6_0,
						"com.ufcg.compiler.Go.EXPRESSAOLINHA");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTIPO
entryRuleTIPO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTIPORule()); }
	iv_ruleTIPO=ruleTIPO
	{ $current=$iv_ruleTIPO.current; }
	EOF;

// Rule TIPO
ruleTIPO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTIPOAccess().getVariavelVarParserRuleCall_0_0());
				}
				lv_variavel_0_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTIPORule());
					}
					set(
						$current,
						"variavel",
						lv_variavel_0_0,
						"com.ufcg.compiler.Go.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTIPOAccess().getConstanteConstParserRuleCall_1_0());
				}
				lv_constante_1_0=ruleConst
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTIPORule());
					}
					set(
						$current,
						"constante",
						lv_constante_1_0,
						"com.ufcg.compiler.Go.Const");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0='var'
			{
				newLeafNode(lv_var_0_0, grammarAccess.getVarAccess().getVarVarKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed($current, "var", lv_var_0_0, "var");
			}
		)
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_const_0_0='const'
			{
				newLeafNode(lv_const_0_0, grammarAccess.getConstAccess().getConstConstKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstRule());
				}
				setWithLastConsumed($current, "const", lv_const_0_0, "const");
			}
		)
	)
;

// Entry rule entryRuleIGUAL
entryRuleIGUAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIGUALRule()); }
	iv_ruleIGUAL=ruleIGUAL
	{ $current=$iv_ruleIGUAL.current; }
	EOF;

// Rule IGUAL
ruleIGUAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_igual_0_0='='
			{
				newLeafNode(lv_igual_0_0, grammarAccess.getIGUALAccess().getIgualEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIGUALRule());
				}
				setWithLastConsumed($current, "igual", lv_igual_0_0, "=");
			}
		)
	)
;

// Entry rule entryRulePONTOSIGUAL
entryRulePONTOSIGUAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPONTOSIGUALRule()); }
	iv_rulePONTOSIGUAL=rulePONTOSIGUAL
	{ $current=$iv_rulePONTOSIGUAL.current; }
	EOF;

// Rule PONTOSIGUAL
rulePONTOSIGUAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=':='
			{
				newLeafNode(lv_op_0_0, grammarAccess.getPONTOSIGUALAccess().getOpColonEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPONTOSIGUALRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, ":=");
			}
		)
	)
;

// Entry rule entryRuleEXPRESSAOLINHA
entryRuleEXPRESSAOLINHA returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEXPRESSAOLINHARule()); }
	iv_ruleEXPRESSAOLINHA=ruleEXPRESSAOLINHA
	{ $current=$iv_ruleEXPRESSAOLINHA.current; }
	EOF;

// Rule EXPRESSAOLINHA
ruleEXPRESSAOLINHA returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEXPRESSAOLINHAAccess().getExpEXPRESSAOParserRuleCall_0_0_0());
					}
					lv_exp_0_0=ruleEXPRESSAO
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEXPRESSAOLINHARule());
						}
						set(
							$current,
							"exp",
							lv_exp_0_0,
							"com.ufcg.compiler.Go.EXPRESSAO");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEXPRESSAOLINHAAccess().getExplinhaEXPRESSAOLINHAParserRuleCall_0_1_0());
					}
					lv_explinha_1_0=ruleEXPRESSAOLINHA
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEXPRESSAOLINHARule());
						}
						set(
							$current,
							"explinha",
							lv_explinha_1_0,
							"com.ufcg.compiler.Go.EXPRESSAOLINHA");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOLINHAAccess().getExpEXPRESSAOParserRuleCall_1_0());
				}
				lv_exp_2_0=ruleEXPRESSAO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAOLINHARule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"com.ufcg.compiler.Go.EXPRESSAO");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEXPRESSAO
entryRuleEXPRESSAO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEXPRESSAORule()); }
	iv_ruleEXPRESSAO=ruleEXPRESSAO
	{ $current=$iv_ruleEXPRESSAO.current; }
	EOF;

// Rule EXPRESSAO
ruleEXPRESSAO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getEXPRESSAOAccess().getEXPRESSAOAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEXPRESSAOAccess().getDeclFunctionFunctionTypeParserRuleCall_0_1_0());
					}
					lv_declFunction_1_0=ruleFunctionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
						}
						set(
							$current,
							"declFunction",
							lv_declFunction_1_0,
							"com.ufcg.compiler.Go.FunctionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getVariaveisVarDeclParserRuleCall_1_0());
				}
				lv_variaveis_2_0=ruleVarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"variaveis",
						lv_variaveis_2_0,
						"com.ufcg.compiler.Go.VarDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getBasicLITERAIS_BASICOSParserRuleCall_2_0());
				}
				lv_basic_3_0=ruleLITERAIS_BASICOS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"basic",
						lv_basic_3_0,
						"com.ufcg.compiler.Go.LITERAIS_BASICOS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getBinary_expBINARY_EXPParserRuleCall_3_0());
				}
				lv_binary_exp_4_0=ruleBINARY_EXP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"binary_exp",
						lv_binary_exp_4_0,
						"com.ufcg.compiler.Go.BINARY_EXP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getDeclFunctionFunctionTypeParserRuleCall_4_0());
				}
				lv_declFunction_5_0=ruleFunctionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"declFunction",
						lv_declFunction_5_0,
						"com.ufcg.compiler.Go.FunctionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getAssignmentAssignmentParserRuleCall_5_0());
				}
				lv_assignment_6_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_6_0,
						"com.ufcg.compiler.Go.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getVariaveisVarDeclParserRuleCall_6_0());
				}
				lv_variaveis_7_0=ruleVarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"variaveis",
						lv_variaveis_7_0,
						"com.ufcg.compiler.Go.VarDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getForForDeclParserRuleCall_7_0());
				}
				lv_for_8_0=ruleForDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"for",
						lv_for_8_0,
						"com.ufcg.compiler.Go.ForDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getBasicLITERAIS_BASICOSParserRuleCall_8_0());
				}
				lv_basic_9_0=ruleLITERAIS_BASICOS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"basic",
						lv_basic_9_0,
						"com.ufcg.compiler.Go.LITERAIS_BASICOS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEXPRESSAOAccess().getArrayValueArrayValueParserRuleCall_9_0());
				}
				lv_arrayValue_10_0=ruleArrayValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEXPRESSAORule());
					}
					set(
						$current,
						"arrayValue",
						lv_arrayValue_10_0,
						"com.ufcg.compiler.Go.ArrayValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayValue
entryRuleArrayValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayValueRule()); }
	iv_ruleArrayValue=ruleArrayValue
	{ $current=$iv_ruleArrayValue.current; }
	EOF;

// Rule ArrayValue
ruleArrayValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayValueAccess().getLitLiteraisListParserRuleCall_1_0());
				}
				lv_lit_1_0=ruleLiteraisList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayValueRule());
					}
					set(
						$current,
						"lit",
						lv_lit_1_0,
						"com.ufcg.compiler.Go.LiteraisList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleLiteraisList
entryRuleLiteraisList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteraisListRule()); }
	iv_ruleLiteraisList=ruleLiteraisList
	{ $current=$iv_ruleLiteraisList.current; }
	EOF;

// Rule LiteraisList
ruleLiteraisList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteraisListAccess().getLitLITERAIS_BASICOSParserRuleCall_0_0());
				}
				lv_lit_0_0=ruleLITERAIS_BASICOS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteraisListRule());
					}
					add(
						$current,
						"lit",
						lv_lit_0_0,
						"com.ufcg.compiler.Go.LITERAIS_BASICOS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteraisListAccess().getLitLITERAIS_BASICOSParserRuleCall_1_0_0());
					}
					lv_lit_1_0=ruleLITERAIS_BASICOS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteraisListRule());
						}
						add(
							$current,
							"lit",
							lv_lit_1_0,
							"com.ufcg.compiler.Go.LITERAIS_BASICOS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteraisListAccess().getCommaKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteraisListAccess().getLitLiteraisListParserRuleCall_1_2_0());
					}
					lv_lit_3_0=ruleLiteraisList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteraisListRule());
						}
						add(
							$current,
							"lit",
							lv_lit_3_0,
							"com.ufcg.compiler.Go.LiteraisList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLITERAIS_BASICOS
entryRuleLITERAIS_BASICOS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLITERAIS_BASICOSRule()); }
	iv_ruleLITERAIS_BASICOS=ruleLITERAIS_BASICOS
	{ $current=$iv_ruleLITERAIS_BASICOS.current; }
	EOF;

// Rule LITERAIS_BASICOS
ruleLITERAIS_BASICOS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_numero_0_0=RULE_NUMERO
				{
					newLeafNode(lv_numero_0_0, grammarAccess.getLITERAIS_BASICOSAccess().getNumeroNUMEROTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLITERAIS_BASICOSRule());
					}
					setWithLastConsumed(
						$current,
						"numero",
						lv_numero_0_0,
						"com.ufcg.compiler.Go.NUMERO");
				}
			)
		)
		    |
		(
			(
				lv_string_1_0=RULE_STRING_DECL
				{
					newLeafNode(lv_string_1_0, grammarAccess.getLITERAIS_BASICOSAccess().getStringSTRING_DECLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLITERAIS_BASICOSRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_1_0,
						"com.ufcg.compiler.Go.STRING_DECL");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLITERAIS_BASICOSAccess().getBooleanoBOOLEAN_VALUEParserRuleCall_2_0());
				}
				lv_booleano_2_0=ruleBOOLEAN_VALUE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLITERAIS_BASICOSRule());
					}
					set(
						$current,
						"booleano",
						lv_booleano_2_0,
						"com.ufcg.compiler.Go.BOOLEAN_VALUE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBINARY_EXP
entryRuleBINARY_EXP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBINARY_EXPRule()); }
	iv_ruleBINARY_EXP=ruleBINARY_EXP
	{ $current=$iv_ruleBINARY_EXP.current; }
	EOF;

// Rule BINARY_EXP
ruleBINARY_EXP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBINARY_EXPAccess().getBasicLITERAIS_BASICOSParserRuleCall_0_0_0());
					}
					lv_basic_0_0=ruleLITERAIS_BASICOS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBINARY_EXPRule());
						}
						set(
							$current,
							"basic",
							lv_basic_0_0,
							"com.ufcg.compiler.Go.LITERAIS_BASICOS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBINARY_EXPAccess().getBoolBOOL_OPParserRuleCall_0_1_0_0());
						}
						lv_bool_1_0=ruleBOOL_OP
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBINARY_EXPRule());
							}
							set(
								$current,
								"bool",
								lv_bool_1_0,
								"com.ufcg.compiler.Go.BOOL_OP");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getBINARY_EXPAccess().getAritARIT_OPParserRuleCall_0_1_1_0());
						}
						lv_arit_2_0=ruleARIT_OP
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBINARY_EXPRule());
							}
							set(
								$current,
								"arit",
								lv_arit_2_0,
								"com.ufcg.compiler.Go.ARIT_OP");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBINARY_EXPAccess().getBinabasicBINARY_EXPParserRuleCall_0_2_0());
					}
					lv_binabasic_3_0=ruleBINARY_EXP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBINARY_EXPRule());
						}
						set(
							$current,
							"binabasic",
							lv_binabasic_3_0,
							"com.ufcg.compiler.Go.BINARY_EXP");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBINARY_EXPAccess().getUnique_basicLITERAIS_BASICOSParserRuleCall_1_0());
				}
				lv_unique_basic_4_0=ruleLITERAIS_BASICOS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBINARY_EXPRule());
					}
					set(
						$current,
						"unique_basic",
						lv_unique_basic_4_0,
						"com.ufcg.compiler.Go.LITERAIS_BASICOS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionType
entryRuleFunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_ruleFunctionType=ruleFunctionType
	{ $current=$iv_ruleFunctionType.current; }
	EOF;

// Rule FunctionType
ruleFunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		(
			(
				lv_nome_1_0=RULE_ID
				{
					newLeafNode(lv_nome_1_0, grammarAccess.getFunctionTypeAccess().getNomeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"nome",
						lv_nome_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getAssinaturaSignatureParserRuleCall_2_0());
				}
				lv_assinatura_2_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"assinatura",
						lv_assinatura_2_0,
						"com.ufcg.compiler.Go.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getBlocoBLOCKParserRuleCall_3_0());
				}
				lv_bloco_3_0=ruleBLOCK
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"bloco",
						lv_bloco_3_0,
						"com.ufcg.compiler.Go.BLOCK");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current; }
	EOF;

// Rule Signature
ruleSignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current = $this_Parameters_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getRetornoResultParserRuleCall_1_0());
				}
				lv_retorno_1_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"retorno",
						lv_retorno_1_0,
						"com.ufcg.compiler.Go.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getResultAccess().getResultAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getResultAccess().getParametrosParametersParserRuleCall_0_1_0());
					}
					lv_parametros_1_0=ruleParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getResultRule());
						}
						set(
							$current,
							"parametros",
							lv_parametros_1_0,
							"com.ufcg.compiler.Go.Parameters");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getTipoTypesParserRuleCall_1_0());
				}
				lv_tipo_2_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"tipo",
						lv_tipo_2_0,
						"com.ufcg.compiler.Go.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametersAccess().getParametersAction_0(),
					$current);
			}
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getParametersAccess().getABRE_PARENTESESParserRuleCall_1());
		}
		ruleABRE_PARENTESES
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getParametersAccess().getPARAMETERS_LISTParserRuleCall_2());
			}
			this_PARAMETERS_LIST_2=rulePARAMETERS_LIST
			{
				$current = $this_PARAMETERS_LIST_2.current;
				afterParserOrEnumRuleCall();
			}
		)?
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getParametersAccess().getFECHA_PARENTESESParserRuleCall_3());
		}
		ruleFECHA_PARENTESES
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleABRE_PARENTESES
entryRuleABRE_PARENTESES returns [String current=null]:
	{ newCompositeNode(grammarAccess.getABRE_PARENTESESRule()); }
	iv_ruleABRE_PARENTESES=ruleABRE_PARENTESES
	{ $current=$iv_ruleABRE_PARENTESES.current.getText(); }
	EOF;

// Rule ABRE_PARENTESES
ruleABRE_PARENTESES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='('
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getABRE_PARENTESESAccess().getLeftParenthesisKeyword());
	}
;

// Entry rule entryRuleFECHA_PARENTESES
entryRuleFECHA_PARENTESES returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFECHA_PARENTESESRule()); }
	iv_ruleFECHA_PARENTESES=ruleFECHA_PARENTESES
	{ $current=$iv_ruleFECHA_PARENTESES.current.getText(); }
	EOF;

// Rule FECHA_PARENTESES
ruleFECHA_PARENTESES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=')'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFECHA_PARENTESESAccess().getRightParenthesisKeyword());
	}
;

// Entry rule entryRuleBLOCK
entryRuleBLOCK returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBLOCKRule()); }
	iv_ruleBLOCK=ruleBLOCK
	{ $current=$iv_ruleBLOCK.current; }
	EOF;

// Rule BLOCK
ruleBLOCK returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBLOCKAccess().getBLOCKAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBLOCKAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBLOCKAccess().getListaDeComandosEXPRESSAOParserRuleCall_2_0());
				}
				lv_listaDeComandos_2_0=ruleEXPRESSAO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLOCKRule());
					}
					add(
						$current,
						"listaDeComandos",
						lv_listaDeComandos_2_0,
						"com.ufcg.compiler.Go.EXPRESSAO");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBLOCKAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulePARAMETERS_LIST
entryRulePARAMETERS_LIST returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPARAMETERS_LISTRule()); }
	iv_rulePARAMETERS_LIST=rulePARAMETERS_LIST
	{ $current=$iv_rulePARAMETERS_LIST.current; }
	EOF;

// Rule PARAMETERS_LIST
rulePARAMETERS_LIST returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPARAMETERS_LISTAccess().getPARAMETERParserRuleCall_0());
		}
		this_PARAMETER_0=rulePARAMETER
		{
			$current = $this_PARAMETER_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getPARAMETERS_LISTAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPARAMETERS_LISTAccess().getPARAMETERPARAMETERParserRuleCall_1_1_0());
					}
					lv_PARAMETER_2_0=rulePARAMETER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPARAMETERS_LISTRule());
						}
						add(
							$current,
							"PARAMETER",
							lv_PARAMETER_2_0,
							"com.ufcg.compiler.Go.PARAMETER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePARAMETER
entryRulePARAMETER returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPARAMETERRule()); }
	iv_rulePARAMETER=rulePARAMETER
	{ $current=$iv_rulePARAMETER.current; }
	EOF;

// Rule PARAMETER
rulePARAMETER returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getPARAMETERAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPARAMETERRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPARAMETERAccess().getTipoTypesParserRuleCall_1_0());
				}
				lv_tipo_1_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPARAMETERRule());
					}
					set(
						$current,
						"tipo",
						lv_tipo_1_0,
						"com.ufcg.compiler.Go.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	iv_ruleTypes=ruleTypes
	{ $current=$iv_ruleTypes.current; }
	EOF;

// Rule Types
ruleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypesAccess().getBasicBasicTypeParserRuleCall_0_0());
				}
				lv_basic_0_0=ruleBasicType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypesRule());
					}
					set(
						$current,
						"basic",
						lv_basic_0_0,
						"com.ufcg.compiler.Go.BasicType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypesAccess().getArrayArrayTypeParserRuleCall_1_0());
				}
				lv_array_1_0=ruleArrayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypesRule());
					}
					set(
						$current,
						"array",
						lv_array_1_0,
						"com.ufcg.compiler.Go.ArrayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_ruleArrayType=ruleArrayType
	{ $current=$iv_ruleArrayType.current; }
	EOF;

// Rule ArrayType
ruleArrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_qtd_1_0=RULE_NUMERO
				{
					newLeafNode(lv_qtd_1_0, grammarAccess.getArrayTypeAccess().getQtdNUMEROTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayTypeRule());
					}
					setWithLastConsumed(
						$current,
						"qtd",
						lv_qtd_1_0,
						"com.ufcg.compiler.Go.NUMERO");
				}
			)
		)?
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getBasicBasicTypeParserRuleCall_3_0());
				}
				lv_basic_3_0=ruleBasicType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"basic",
						lv_basic_3_0,
						"com.ufcg.compiler.Go.BasicType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current; }
	EOF;

// Rule BasicType
ruleBasicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_string_0_0='string'
				{
					newLeafNode(lv_string_0_0, grammarAccess.getBasicTypeAccess().getStringStringKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "string", lv_string_0_0, "string");
				}
			)
		)
		    |
		(
			(
				lv_int_1_0='int'
				{
					newLeafNode(lv_int_1_0, grammarAccess.getBasicTypeAccess().getIntIntKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "int", lv_int_1_0, "int");
				}
			)
		)
		    |
		(
			(
				lv_float_2_0='float'
				{
					newLeafNode(lv_float_2_0, grammarAccess.getBasicTypeAccess().getFloatFloatKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "float", lv_float_2_0, "float");
				}
			)
		)
		    |
		(
			(
				lv_boolean_3_0='bool'
				{
					newLeafNode(lv_boolean_3_0, grammarAccess.getBasicTypeAccess().getBooleanBoolKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "boolean", lv_boolean_3_0, "bool");
				}
			)
		)
	)
;

// Entry rule entryRuleARIT_OP
entryRuleARIT_OP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getARIT_OPRule()); }
	iv_ruleARIT_OP=ruleARIT_OP
	{ $current=$iv_ruleARIT_OP.current.getText(); }
	EOF;

// Rule ARIT_OP
ruleARIT_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARIT_OPAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARIT_OPAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARIT_OPAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARIT_OPAccess().getSolidusKeyword_3());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARIT_OPAccess().getCircumflexAccentKeyword_4());
		}
	)
;

// Entry rule entryRuleCOMPARISON
entryRuleCOMPARISON returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOMPARISONRule()); }
	iv_ruleCOMPARISON=ruleCOMPARISON
	{ $current=$iv_ruleCOMPARISON.current; }
	EOF;

// Rule COMPARISON
ruleCOMPARISON returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_igual_0_0='=='
				{
					newLeafNode(lv_igual_0_0, grammarAccess.getCOMPARISONAccess().getIgualEqualsSignEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPARISONRule());
					}
					setWithLastConsumed($current, "igual", lv_igual_0_0, "==");
				}
			)
		)
		    |
		(
			(
				lv_maiorigualque_1_0='>='
				{
					newLeafNode(lv_maiorigualque_1_0, grammarAccess.getCOMPARISONAccess().getMaiorigualqueGreaterThanSignEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPARISONRule());
					}
					setWithLastConsumed($current, "maiorigualque", lv_maiorigualque_1_0, ">=");
				}
			)
		)
		    |
		(
			(
				lv_menorigualque_2_0='<='
				{
					newLeafNode(lv_menorigualque_2_0, grammarAccess.getCOMPARISONAccess().getMenorigualqueLessThanSignEqualsSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPARISONRule());
					}
					setWithLastConsumed($current, "menorigualque", lv_menorigualque_2_0, "<=");
				}
			)
		)
		    |
		(
			(
				lv_maiorque_3_0='>'
				{
					newLeafNode(lv_maiorque_3_0, grammarAccess.getCOMPARISONAccess().getMaiorqueGreaterThanSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPARISONRule());
					}
					setWithLastConsumed($current, "maiorque", lv_maiorque_3_0, ">");
				}
			)
		)
		    |
		(
			(
				lv_menorque_4_0='<'
				{
					newLeafNode(lv_menorque_4_0, grammarAccess.getCOMPARISONAccess().getMenorqueLessThanSignKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPARISONRule());
					}
					setWithLastConsumed($current, "menorque", lv_menorque_4_0, "<");
				}
			)
		)
	)
;

RULE_NUMERO : RULE_INT;

RULE_STRING_DECL : '"' (RULE_ID|RULE_NUMERO)* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
