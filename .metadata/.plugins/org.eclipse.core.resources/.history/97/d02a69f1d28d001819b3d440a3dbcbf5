/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.go.impl;

import com.ufcg.compiler.go.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GoFactoryImpl extends EFactoryImpl implements GoFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GoFactory init()
  {
    try
    {
      GoFactory theGoFactory = (GoFactory)EPackage.Registry.INSTANCE.getEFactory(GoPackage.eNS_URI);
      if (theGoFactory != null)
      {
        return theGoFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GoFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GoPackage.INIT: return createInit();
      case GoPackage.BOOL_OP: return createBOOL_OP();
      case GoPackage.BOOLEAN_VALUE: return createBOOLEAN_VALUE();
      case GoPackage.GO_DECL: return createGoDecl();
      case GoPackage.FOR_DECL: return createForDecl();
      case GoPackage.FOR_CLAUSE: return createForClause();
      case GoPackage.INIT_STMT: return createInitStmt();
      case GoPackage.POST_STMT: return createPostStmt();
      case GoPackage.CONDITION: return createCondition();
      case GoPackage.ID_LIST: return createIDList();
      case GoPackage.VAR_DECL: return createVarDecl();
      case GoPackage.SIGNATURE_DEL: return createSignatureDel();
      case GoPackage.ASSIGNMENT: return createAssignment();
      case GoPackage.TIPO: return createTIPO();
      case GoPackage.VAR: return createVar();
      case GoPackage.CONST: return createConst();
      case GoPackage.IGUAL: return createIGUAL();
      case GoPackage.PONTOSIGUAL: return createPONTOSIGUAL();
      case GoPackage.EXPRESSAOLINHA: return createEXPRESSAOLINHA();
      case GoPackage.EXPRESSAO: return createEXPRESSAO();
      case GoPackage.ARRAY_VALUE: return createArrayValue();
      case GoPackage.LITERAIS_LIST: return createLiteraisList();
      case GoPackage.LITERAIS_BASICOS: return createLITERAIS_BASICOS();
      case GoPackage.BINARY_EXP: return createBINARY_EXP();
      case GoPackage.FUNCTION_TYPE: return createFunctionType();
      case GoPackage.SIGNATURE: return createSignature();
      case GoPackage.RESULT: return createResult();
      case GoPackage.PARAMETERS: return createParameters();
      case GoPackage.BLOCK: return createBLOCK();
      case GoPackage.PARAMETERS_LIST: return createPARAMETERS_LIST();
      case GoPackage.PARAMETER: return createPARAMETER();
      case GoPackage.TYPES: return createTypes();
      case GoPackage.ARRAY_TYPE: return createArrayType();
      case GoPackage.BASIC_TYPE: return createBasicType();
      case GoPackage.COMPARISON: return createCOMPARISON();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Init createInit()
  {
    InitImpl init = new InitImpl();
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL_OP createBOOL_OP()
  {
    BOOL_OPImpl booL_OP = new BOOL_OPImpl();
    return booL_OP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOLEAN_VALUE createBOOLEAN_VALUE()
  {
    BOOLEAN_VALUEImpl booleaN_VALUE = new BOOLEAN_VALUEImpl();
    return booleaN_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoDecl createGoDecl()
  {
    GoDeclImpl goDecl = new GoDeclImpl();
    return goDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForDecl createForDecl()
  {
    ForDeclImpl forDecl = new ForDeclImpl();
    return forDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForClause createForClause()
  {
    ForClauseImpl forClause = new ForClauseImpl();
    return forClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitStmt createInitStmt()
  {
    InitStmtImpl initStmt = new InitStmtImpl();
    return initStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostStmt createPostStmt()
  {
    PostStmtImpl postStmt = new PostStmtImpl();
    return postStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDList createIDList()
  {
    IDListImpl idList = new IDListImpl();
    return idList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SignatureDel createSignatureDel()
  {
    SignatureDelImpl signatureDel = new SignatureDelImpl();
    return signatureDel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TIPO createTIPO()
  {
    TIPOImpl tipo = new TIPOImpl();
    return tipo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Const createConst()
  {
    ConstImpl const_ = new ConstImpl();
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IGUAL createIGUAL()
  {
    IGUALImpl igual = new IGUALImpl();
    return igual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PONTOSIGUAL createPONTOSIGUAL()
  {
    PONTOSIGUALImpl pontosigual = new PONTOSIGUALImpl();
    return pontosigual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EXPRESSAOLINHA createEXPRESSAOLINHA()
  {
    EXPRESSAOLINHAImpl expressaolinha = new EXPRESSAOLINHAImpl();
    return expressaolinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EXPRESSAO createEXPRESSAO()
  {
    EXPRESSAOImpl expressao = new EXPRESSAOImpl();
    return expressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayValue createArrayValue()
  {
    ArrayValueImpl arrayValue = new ArrayValueImpl();
    return arrayValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteraisList createLiteraisList()
  {
    LiteraisListImpl literaisList = new LiteraisListImpl();
    return literaisList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LITERAIS_BASICOS createLITERAIS_BASICOS()
  {
    LITERAIS_BASICOSImpl literaiS_BASICOS = new LITERAIS_BASICOSImpl();
    return literaiS_BASICOS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BINARY_EXP createBINARY_EXP()
  {
    BINARY_EXPImpl binarY_EXP = new BINARY_EXPImpl();
    return binarY_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionType createFunctionType()
  {
    FunctionTypeImpl functionType = new FunctionTypeImpl();
    return functionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameters createParameters()
  {
    ParametersImpl parameters = new ParametersImpl();
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BLOCK createBLOCK()
  {
    BLOCKImpl block = new BLOCKImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PARAMETERS_LIST createPARAMETERS_LIST()
  {
    PARAMETERS_LISTImpl parameterS_LIST = new PARAMETERS_LISTImpl();
    return parameterS_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PARAMETER createPARAMETER()
  {
    PARAMETERImpl parameter = new PARAMETERImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Types createTypes()
  {
    TypesImpl types = new TypesImpl();
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicType createBasicType()
  {
    BasicTypeImpl basicType = new BasicTypeImpl();
    return basicType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COMPARISON createCOMPARISON()
  {
    COMPARISONImpl comparison = new COMPARISONImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoPackage getGoPackage()
  {
    return (GoPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GoPackage getPackage()
  {
    return GoPackage.eINSTANCE;
  }

} //GoFactoryImpl
