/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.go.util;

import com.ufcg.compiler.go.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.ufcg.compiler.go.GoPackage
 * @generated
 */
public class GoAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GoPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GoSwitch<Adapter> modelSwitch =
    new GoSwitch<Adapter>()
    {
      @Override
      public Adapter caseInit(Init object)
      {
        return createInitAdapter();
      }
      @Override
      public Adapter caseBOOL_OP(BOOL_OP object)
      {
        return createBOOL_OPAdapter();
      }
      @Override
      public Adapter caseBOOLEAN_VALUE(BOOLEAN_VALUE object)
      {
        return createBOOLEAN_VALUEAdapter();
      }
      @Override
      public Adapter caseGoDecl(GoDecl object)
      {
        return createGoDeclAdapter();
      }
      @Override
      public Adapter caseForDecl(ForDecl object)
      {
        return createForDeclAdapter();
      }
      @Override
      public Adapter caseForClause(ForClause object)
      {
        return createForClauseAdapter();
      }
      @Override
      public Adapter caseInitStmt(InitStmt object)
      {
        return createInitStmtAdapter();
      }
      @Override
      public Adapter casePostStmt(PostStmt object)
      {
        return createPostStmtAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseIDList(IDList object)
      {
        return createIDListAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseSignatureDel(SignatureDel object)
      {
        return createSignatureDelAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseTIPO(TIPO object)
      {
        return createTIPOAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseIGUAL(IGUAL object)
      {
        return createIGUALAdapter();
      }
      @Override
      public Adapter casePONTOSIGUAL(PONTOSIGUAL object)
      {
        return createPONTOSIGUALAdapter();
      }
      @Override
      public Adapter caseEXPRESSAOLINHA(EXPRESSAOLINHA object)
      {
        return createEXPRESSAOLINHAAdapter();
      }
      @Override
      public Adapter caseEXPRESSAO(EXPRESSAO object)
      {
        return createEXPRESSAOAdapter();
      }
      @Override
      public Adapter caseArrayValue(ArrayValue object)
      {
        return createArrayValueAdapter();
      }
      @Override
      public Adapter caseLiteraisList(LiteraisList object)
      {
        return createLiteraisListAdapter();
      }
      @Override
      public Adapter caseLITERAIS_BASICOS(LITERAIS_BASICOS object)
      {
        return createLITERAIS_BASICOSAdapter();
      }
      @Override
      public Adapter caseBINARY_EXP(BINARY_EXP object)
      {
        return createBINARY_EXPAdapter();
      }
      @Override
      public Adapter caseFunctionType(FunctionType object)
      {
        return createFunctionTypeAdapter();
      }
      @Override
      public Adapter caseSignature(Signature object)
      {
        return createSignatureAdapter();
      }
      @Override
      public Adapter caseResult(Result object)
      {
        return createResultAdapter();
      }
      @Override
      public Adapter caseParameters(Parameters object)
      {
        return createParametersAdapter();
      }
      @Override
      public Adapter caseBLOCK(BLOCK object)
      {
        return createBLOCKAdapter();
      }
      @Override
      public Adapter casePARAMETERS_LIST(PARAMETERS_LIST object)
      {
        return createPARAMETERS_LISTAdapter();
      }
      @Override
      public Adapter casePARAMETER(PARAMETER object)
      {
        return createPARAMETERAdapter();
      }
      @Override
      public Adapter caseTypes(Types object)
      {
        return createTypesAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter caseBasicType(BasicType object)
      {
        return createBasicTypeAdapter();
      }
      @Override
      public Adapter caseCOMPARISON(COMPARISON object)
      {
        return createCOMPARISONAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Init <em>Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Init
   * @generated
   */
  public Adapter createInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.BOOL_OP <em>BOOL OP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.BOOL_OP
   * @generated
   */
  public Adapter createBOOL_OPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.BOOLEAN_VALUE <em>BOOLEAN VALUE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.BOOLEAN_VALUE
   * @generated
   */
  public Adapter createBOOLEAN_VALUEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.GoDecl <em>Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.GoDecl
   * @generated
   */
  public Adapter createGoDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.ForDecl <em>For Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.ForDecl
   * @generated
   */
  public Adapter createForDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.ForClause <em>For Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.ForClause
   * @generated
   */
  public Adapter createForClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.InitStmt <em>Init Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.InitStmt
   * @generated
   */
  public Adapter createInitStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.PostStmt <em>Post Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.PostStmt
   * @generated
   */
  public Adapter createPostStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.IDList <em>ID List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.IDList
   * @generated
   */
  public Adapter createIDListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.SignatureDel <em>Signature Del</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.SignatureDel
   * @generated
   */
  public Adapter createSignatureDelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.TIPO <em>TIPO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.TIPO
   * @generated
   */
  public Adapter createTIPOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.IGUAL <em>IGUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.IGUAL
   * @generated
   */
  public Adapter createIGUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.PONTOSIGUAL <em>PONTOSIGUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.PONTOSIGUAL
   * @generated
   */
  public Adapter createPONTOSIGUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.EXPRESSAOLINHA <em>EXPRESSAOLINHA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.EXPRESSAOLINHA
   * @generated
   */
  public Adapter createEXPRESSAOLINHAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.EXPRESSAO <em>EXPRESSAO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.EXPRESSAO
   * @generated
   */
  public Adapter createEXPRESSAOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.ArrayValue <em>Array Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.ArrayValue
   * @generated
   */
  public Adapter createArrayValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.LiteraisList <em>Literais List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.LiteraisList
   * @generated
   */
  public Adapter createLiteraisListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.LITERAIS_BASICOS <em>LITERAIS BASICOS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.LITERAIS_BASICOS
   * @generated
   */
  public Adapter createLITERAIS_BASICOSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.BINARY_EXP <em>BINARY EXP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.BINARY_EXP
   * @generated
   */
  public Adapter createBINARY_EXPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.FunctionType <em>Function Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.FunctionType
   * @generated
   */
  public Adapter createFunctionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Signature <em>Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Signature
   * @generated
   */
  public Adapter createSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Result <em>Result</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Result
   * @generated
   */
  public Adapter createResultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Parameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Parameters
   * @generated
   */
  public Adapter createParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.BLOCK <em>BLOCK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.BLOCK
   * @generated
   */
  public Adapter createBLOCKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.PARAMETERS_LIST <em>PARAMETERS LIST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.PARAMETERS_LIST
   * @generated
   */
  public Adapter createPARAMETERS_LISTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.PARAMETER <em>PARAMETER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.PARAMETER
   * @generated
   */
  public Adapter createPARAMETERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.Types <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.Types
   * @generated
   */
  public Adapter createTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.BasicType <em>Basic Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.BasicType
   * @generated
   */
  public Adapter createBasicTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ufcg.compiler.go.COMPARISON <em>COMPARISON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ufcg.compiler.go.COMPARISON
   * @generated
   */
  public Adapter createCOMPARISONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GoAdapterFactory
