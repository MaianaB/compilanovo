/*
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.Init");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsGoDeclParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Init:
		//	elements+=GoDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=GoDecl*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//GoDecl
		public RuleCall getElementsGoDeclParserRuleCall_0() { return cElementsGoDeclParserRuleCall_0; }
	}
	public class GoDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.GoDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVarDeclParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuncFUNCAOParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		
		//GoDecl:
		//	var=VarDecl | func=FUNCAO;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VarDecl | func=FUNCAO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=VarDecl
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VarDecl
		public RuleCall getVarVarDeclParserRuleCall_0_0() { return cVarVarDeclParserRuleCall_0_0; }
		
		//func=FUNCAO
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//FUNCAO
		public RuleCall getFuncFUNCAOParserRuleCall_1_0() { return cFuncFUNCAOParserRuleCall_1_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoDeclTIPOParserRuleCall_0_0 = (RuleCall)cTipoDeclAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cAtribuicaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtribuicaoIGUALParserRuleCall_2_0 = (RuleCall)cAtribuicaoAssignment_2.eContents().get(0);
		private final Assignment cExpressaoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressaoEXPRESSAOParserRuleCall_3_0 = (RuleCall)cExpressaoAssignment_3.eContents().get(0);
		
		//VarDecl:
		//	tipoDecl=TIPO id=Terminals::ID atribuicao=IGUAL expressao=EXPRESSAO;
		@Override public ParserRule getRule() { return rule; }
		
		//tipoDecl=TIPO id=Terminals::ID atribuicao=IGUAL expressao=EXPRESSAO
		public Group getGroup() { return cGroup; }
		
		//tipoDecl=TIPO
		public Assignment getTipoDeclAssignment_0() { return cTipoDeclAssignment_0; }
		
		//TIPO
		public RuleCall getTipoDeclTIPOParserRuleCall_0_0() { return cTipoDeclTIPOParserRuleCall_0_0; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//atribuicao=IGUAL
		public Assignment getAtribuicaoAssignment_2() { return cAtribuicaoAssignment_2; }
		
		//IGUAL
		public RuleCall getAtribuicaoIGUALParserRuleCall_2_0() { return cAtribuicaoIGUALParserRuleCall_2_0; }
		
		//expressao=EXPRESSAO
		public Assignment getExpressaoAssignment_3() { return cExpressaoAssignment_3; }
		
		//EXPRESSAO
		public RuleCall getExpressaoEXPRESSAOParserRuleCall_3_0() { return cExpressaoEXPRESSAOParserRuleCall_3_0; }
	}
	public class TIPOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.TIPO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariavelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVariavelVarKeyword_0_0 = (Keyword)cVariavelAssignment_0.eContents().get(0);
		private final Assignment cConstanteAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cConstanteConstKeyword_1_0 = (Keyword)cConstanteAssignment_1.eContents().get(0);
		
		//TIPO:
		//	variavel="var" | constante="const";
		@Override public ParserRule getRule() { return rule; }
		
		//variavel="var" | constante="const"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variavel="var"
		public Assignment getVariavelAssignment_0() { return cVariavelAssignment_0; }
		
		//"var"
		public Keyword getVariavelVarKeyword_0_0() { return cVariavelVarKeyword_0_0; }
		
		//constante="const"
		public Assignment getConstanteAssignment_1() { return cConstanteAssignment_1; }
		
		//"const"
		public Keyword getConstanteConstKeyword_1_0() { return cConstanteConstKeyword_1_0; }
	}
	public class IGUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.IGUAL");
		private final Assignment cIgualAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIgualEqualsSignKeyword_0 = (Keyword)cIgualAssignment.eContents().get(0);
		
		//IGUAL:
		//	igual="=";
		@Override public ParserRule getRule() { return rule; }
		
		//igual="="
		public Assignment getIgualAssignment() { return cIgualAssignment; }
		
		//"="
		public Keyword getIgualEqualsSignKeyword_0() { return cIgualEqualsSignKeyword_0; }
	}
	public class EXPRESSAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.EXPRESSAO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicLITERAIS_BASICOSParserRuleCall_0_0 = (RuleCall)cBasicAssignment_0.eContents().get(0);
		private final Assignment cDeclFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclFunctionFUNCAOParserRuleCall_1_0 = (RuleCall)cDeclFunctionAssignment_1.eContents().get(0);
		
		//EXPRESSAO:
		//	basic=LITERAIS_BASICOS | declFunction=FUNCAO;
		@Override public ParserRule getRule() { return rule; }
		
		//basic=LITERAIS_BASICOS | declFunction=FUNCAO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//basic=LITERAIS_BASICOS
		public Assignment getBasicAssignment_0() { return cBasicAssignment_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicLITERAIS_BASICOSParserRuleCall_0_0() { return cBasicLITERAIS_BASICOSParserRuleCall_0_0; }
		
		//declFunction=FUNCAO
		public Assignment getDeclFunctionAssignment_1() { return cDeclFunctionAssignment_1; }
		
		//FUNCAO
		public RuleCall getDeclFunctionFUNCAOParserRuleCall_1_0() { return cDeclFunctionFUNCAOParserRuleCall_1_0; }
	}
	public class LITERAIS_BASICOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.LITERAIS_BASICOS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumeroAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumeroNUMEROParserRuleCall_0_0 = (RuleCall)cNumeroAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRING_DECLParserRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//LITERAIS_BASICOS:
		//	numero=NUMERO | string=STRING_DECL;
		@Override public ParserRule getRule() { return rule; }
		
		//numero=NUMERO | string=STRING_DECL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numero=NUMERO
		public Assignment getNumeroAssignment_0() { return cNumeroAssignment_0; }
		
		//NUMERO
		public RuleCall getNumeroNUMEROParserRuleCall_0_0() { return cNumeroNUMEROParserRuleCall_0_0; }
		
		//string=STRING_DECL
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING_DECL
		public RuleCall getStringSTRING_DECLParserRuleCall_1_0() { return cStringSTRING_DECLParserRuleCall_1_0; }
	}
	public class FUNCAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.FUNCAO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFuncFuncKeyword_0_0 = (Keyword)cFuncAssignment_0.eContents().get(0);
		private final Assignment cNomeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomeIDTerminalRuleCall_1_0 = (RuleCall)cNomeAssignment_1.eContents().get(0);
		private final Assignment cABRE_PARENTESESAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cABRE_PARENTESESABRE_PARENTESESParserRuleCall_2_0 = (RuleCall)cABRE_PARENTESESAssignment_2.eContents().get(0);
		private final Assignment cPARAMETERS_LISTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPARAMETERS_LISTPARAMETERS_LISTParserRuleCall_3_0 = (RuleCall)cPARAMETERS_LISTAssignment_3.eContents().get(0);
		private final Assignment cFECHA_PARENTESESAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFECHA_PARENTESESFECHA_PARENTESESParserRuleCall_4_0 = (RuleCall)cFECHA_PARENTESESAssignment_4.eContents().get(0);
		private final Assignment cBlocoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlocoBLOCKParserRuleCall_5_0 = (RuleCall)cBlocoAssignment_5.eContents().get(0);
		
		//FUNCAO:
		//	func="func" nome=Terminals::ID ABRE_PARENTESES=ABRE_PARENTESES PARAMETERS_LIST=PARAMETERS_LIST?
		//	FECHA_PARENTESES=FECHA_PARENTESES bloco=BLOCK;
		@Override public ParserRule getRule() { return rule; }
		
		//func="func" nome=Terminals::ID ABRE_PARENTESES=ABRE_PARENTESES PARAMETERS_LIST=PARAMETERS_LIST?
		//FECHA_PARENTESES=FECHA_PARENTESES bloco=BLOCK
		public Group getGroup() { return cGroup; }
		
		//func="func"
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//"func"
		public Keyword getFuncFuncKeyword_0_0() { return cFuncFuncKeyword_0_0; }
		
		//nome=Terminals::ID
		public Assignment getNomeAssignment_1() { return cNomeAssignment_1; }
		
		//Terminals::ID
		public RuleCall getNomeIDTerminalRuleCall_1_0() { return cNomeIDTerminalRuleCall_1_0; }
		
		//ABRE_PARENTESES=ABRE_PARENTESES
		public Assignment getABRE_PARENTESESAssignment_2() { return cABRE_PARENTESESAssignment_2; }
		
		//ABRE_PARENTESES
		public RuleCall getABRE_PARENTESESABRE_PARENTESESParserRuleCall_2_0() { return cABRE_PARENTESESABRE_PARENTESESParserRuleCall_2_0; }
		
		//PARAMETERS_LIST=PARAMETERS_LIST?
		public Assignment getPARAMETERS_LISTAssignment_3() { return cPARAMETERS_LISTAssignment_3; }
		
		//PARAMETERS_LIST
		public RuleCall getPARAMETERS_LISTPARAMETERS_LISTParserRuleCall_3_0() { return cPARAMETERS_LISTPARAMETERS_LISTParserRuleCall_3_0; }
		
		//FECHA_PARENTESES=FECHA_PARENTESES
		public Assignment getFECHA_PARENTESESAssignment_4() { return cFECHA_PARENTESESAssignment_4; }
		
		//FECHA_PARENTESES
		public RuleCall getFECHA_PARENTESESFECHA_PARENTESESParserRuleCall_4_0() { return cFECHA_PARENTESESFECHA_PARENTESESParserRuleCall_4_0; }
		
		//bloco=BLOCK
		public Assignment getBlocoAssignment_5() { return cBlocoAssignment_5; }
		
		//BLOCK
		public RuleCall getBlocoBLOCKParserRuleCall_5_0() { return cBlocoBLOCKParserRuleCall_5_0; }
	}
	public class ABRE_PARENTESESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.ABRE_PARENTESES");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ABRE_PARENTESES:
		//	"(";
		@Override public ParserRule getRule() { return rule; }
		
		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}
	public class FECHA_PARENTESESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.FECHA_PARENTESES");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//FECHA_PARENTESES:
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.BLOCK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLOCKAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListaDeComandosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListaDeComandosEXPRESSAOParserRuleCall_2_0 = (RuleCall)cListaDeComandosAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BLOCK:
		//	{BLOCK} "{" listaDeComandos+=EXPRESSAO* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{BLOCK} "{" listaDeComandos+=EXPRESSAO* "}"
		public Group getGroup() { return cGroup; }
		
		//{BLOCK}
		public Action getBLOCKAction_0() { return cBLOCKAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//listaDeComandos+=EXPRESSAO*
		public Assignment getListaDeComandosAssignment_2() { return cListaDeComandosAssignment_2; }
		
		//EXPRESSAO
		public RuleCall getListaDeComandosEXPRESSAOParserRuleCall_2_0() { return cListaDeComandosEXPRESSAOParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PARAMETERS_LISTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.PARAMETERS_LIST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAMETERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPARAMETERAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPARAMETERPARAMETERParserRuleCall_1_1_0 = (RuleCall)cPARAMETERAssignment_1_1.eContents().get(0);
		
		//PARAMETERS_LIST:
		//	PARAMETER ("," PARAMETER+=PARAMETER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PARAMETER ("," PARAMETER+=PARAMETER)*
		public Group getGroup() { return cGroup; }
		
		//PARAMETER
		public RuleCall getPARAMETERParserRuleCall_0() { return cPARAMETERParserRuleCall_0; }
		
		//("," PARAMETER+=PARAMETER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//PARAMETER+=PARAMETER
		public Assignment getPARAMETERAssignment_1_1() { return cPARAMETERAssignment_1_1; }
		
		//PARAMETER
		public RuleCall getPARAMETERPARAMETERParserRuleCall_1_1_0() { return cPARAMETERPARAMETERParserRuleCall_1_1_0; }
	}
	public class PARAMETERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.PARAMETER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTypesParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		
		//PARAMETER:
		//	id=Terminals::ID tipo=Types;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Terminals::ID tipo=Types
		public Group getGroup() { return cGroup; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//tipo=Types
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }
		
		//Types
		public RuleCall getTipoTypesParserRuleCall_1_0() { return cTipoTypesParserRuleCall_1_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Types:
		//	"string" | "int" | "float" | "boolean";
		@Override public ParserRule getRule() { return rule; }
		
		//"string" | "int" | "float" | "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//"float"
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//"boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	public class NUMEROElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.NUMERO");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NUMERO:
		//	Terminals::INT;
		@Override public ParserRule getRule() { return rule; }
		
		//Terminals::INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class STRING_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiler.Go.STRING_DECL");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//STRING_DECL:
		//	Terminals::ID;
		@Override public ParserRule getRule() { return rule; }
		
		//Terminals::ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final InitElements pInit;
	private final GoDeclElements pGoDecl;
	private final VarDeclElements pVarDecl;
	private final TIPOElements pTIPO;
	private final IGUALElements pIGUAL;
	private final EXPRESSAOElements pEXPRESSAO;
	private final LITERAIS_BASICOSElements pLITERAIS_BASICOS;
	private final FUNCAOElements pFUNCAO;
	private final ABRE_PARENTESESElements pABRE_PARENTESES;
	private final FECHA_PARENTESESElements pFECHA_PARENTESES;
	private final BLOCKElements pBLOCK;
	private final PARAMETERS_LISTElements pPARAMETERS_LIST;
	private final PARAMETERElements pPARAMETER;
	private final TypesElements pTypes;
	private final NUMEROElements pNUMERO;
	private final STRING_DECLElements pSTRING_DECL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInit = new InitElements();
		this.pGoDecl = new GoDeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pTIPO = new TIPOElements();
		this.pIGUAL = new IGUALElements();
		this.pEXPRESSAO = new EXPRESSAOElements();
		this.pLITERAIS_BASICOS = new LITERAIS_BASICOSElements();
		this.pFUNCAO = new FUNCAOElements();
		this.pABRE_PARENTESES = new ABRE_PARENTESESElements();
		this.pFECHA_PARENTESES = new FECHA_PARENTESESElements();
		this.pBLOCK = new BLOCKElements();
		this.pPARAMETERS_LIST = new PARAMETERS_LISTElements();
		this.pPARAMETER = new PARAMETERElements();
		this.pTypes = new TypesElements();
		this.pNUMERO = new NUMEROElements();
		this.pSTRING_DECL = new STRING_DECLElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ufcg.compiler.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Init:
	//	elements+=GoDecl*;
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//GoDecl:
	//	var=VarDecl | func=FUNCAO;
	public GoDeclElements getGoDeclAccess() {
		return pGoDecl;
	}
	
	public ParserRule getGoDeclRule() {
		return getGoDeclAccess().getRule();
	}
	
	//VarDecl:
	//	tipoDecl=TIPO id=Terminals::ID atribuicao=IGUAL expressao=EXPRESSAO;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//TIPO:
	//	variavel="var" | constante="const";
	public TIPOElements getTIPOAccess() {
		return pTIPO;
	}
	
	public ParserRule getTIPORule() {
		return getTIPOAccess().getRule();
	}
	
	//IGUAL:
	//	igual="=";
	public IGUALElements getIGUALAccess() {
		return pIGUAL;
	}
	
	public ParserRule getIGUALRule() {
		return getIGUALAccess().getRule();
	}
	
	//EXPRESSAO:
	//	basic=LITERAIS_BASICOS | declFunction=FUNCAO;
	public EXPRESSAOElements getEXPRESSAOAccess() {
		return pEXPRESSAO;
	}
	
	public ParserRule getEXPRESSAORule() {
		return getEXPRESSAOAccess().getRule();
	}
	
	//LITERAIS_BASICOS:
	//	numero=NUMERO | string=STRING_DECL;
	public LITERAIS_BASICOSElements getLITERAIS_BASICOSAccess() {
		return pLITERAIS_BASICOS;
	}
	
	public ParserRule getLITERAIS_BASICOSRule() {
		return getLITERAIS_BASICOSAccess().getRule();
	}
	
	//FUNCAO:
	//	func="func" nome=Terminals::ID ABRE_PARENTESES=ABRE_PARENTESES PARAMETERS_LIST=PARAMETERS_LIST?
	//	FECHA_PARENTESES=FECHA_PARENTESES bloco=BLOCK;
	public FUNCAOElements getFUNCAOAccess() {
		return pFUNCAO;
	}
	
	public ParserRule getFUNCAORule() {
		return getFUNCAOAccess().getRule();
	}
	
	//ABRE_PARENTESES:
	//	"(";
	public ABRE_PARENTESESElements getABRE_PARENTESESAccess() {
		return pABRE_PARENTESES;
	}
	
	public ParserRule getABRE_PARENTESESRule() {
		return getABRE_PARENTESESAccess().getRule();
	}
	
	//FECHA_PARENTESES:
	//	")";
	public FECHA_PARENTESESElements getFECHA_PARENTESESAccess() {
		return pFECHA_PARENTESES;
	}
	
	public ParserRule getFECHA_PARENTESESRule() {
		return getFECHA_PARENTESESAccess().getRule();
	}
	
	//BLOCK:
	//	{BLOCK} "{" listaDeComandos+=EXPRESSAO* "}";
	public BLOCKElements getBLOCKAccess() {
		return pBLOCK;
	}
	
	public ParserRule getBLOCKRule() {
		return getBLOCKAccess().getRule();
	}
	
	//PARAMETERS_LIST:
	//	PARAMETER ("," PARAMETER+=PARAMETER)*;
	public PARAMETERS_LISTElements getPARAMETERS_LISTAccess() {
		return pPARAMETERS_LIST;
	}
	
	public ParserRule getPARAMETERS_LISTRule() {
		return getPARAMETERS_LISTAccess().getRule();
	}
	
	//PARAMETER:
	//	id=Terminals::ID tipo=Types;
	public PARAMETERElements getPARAMETERAccess() {
		return pPARAMETER;
	}
	
	public ParserRule getPARAMETERRule() {
		return getPARAMETERAccess().getRule();
	}
	
	//Types:
	//	"string" | "int" | "float" | "boolean";
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//NUMERO:
	//	Terminals::INT;
	public NUMEROElements getNUMEROAccess() {
		return pNUMERO;
	}
	
	public ParserRule getNUMERORule() {
		return getNUMEROAccess().getRule();
	}
	
	//STRING_DECL:
	//	Terminals::ID;
	public STRING_DECLElements getSTRING_DECLAccess() {
		return pSTRING_DECL;
	}
	
	public ParserRule getSTRING_DECLRule() {
		return getSTRING_DECLAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
