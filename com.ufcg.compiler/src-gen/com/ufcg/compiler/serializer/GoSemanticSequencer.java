/*
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.serializer;

import com.google.inject.Inject;
import com.ufcg.compiler.go.BLOCK;
import com.ufcg.compiler.go.EXPRESSAO;
import com.ufcg.compiler.go.FunctionType;
import com.ufcg.compiler.go.GoDecl;
import com.ufcg.compiler.go.GoPackage;
import com.ufcg.compiler.go.IGUAL;
import com.ufcg.compiler.go.Init;
import com.ufcg.compiler.go.LITERAIS_BASICOS;
import com.ufcg.compiler.go.PARAMETER;
import com.ufcg.compiler.go.Parameters;
import com.ufcg.compiler.go.Result;
import com.ufcg.compiler.go.TIPO;
import com.ufcg.compiler.go.VarDecl;
import com.ufcg.compiler.services.GoGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoPackage.BLOCK:
				sequence_BLOCK(context, (BLOCK) semanticObject); 
				return; 
			case GoPackage.EXPRESSAO:
				sequence_EXPRESSAO(context, (EXPRESSAO) semanticObject); 
				return; 
			case GoPackage.FUNCTION_TYPE:
				sequence_FunctionType(context, (FunctionType) semanticObject); 
				return; 
			case GoPackage.GO_DECL:
				sequence_GoDecl(context, (GoDecl) semanticObject); 
				return; 
			case GoPackage.IGUAL:
				sequence_IGUAL(context, (IGUAL) semanticObject); 
				return; 
			case GoPackage.INIT:
				sequence_Init(context, (Init) semanticObject); 
				return; 
			case GoPackage.LITERAIS_BASICOS:
				sequence_LITERAIS_BASICOS(context, (LITERAIS_BASICOS) semanticObject); 
				return; 
			case GoPackage.PARAMETER:
				if (rule == grammarAccess.getPARAMETERRule()) {
					sequence_PARAMETER(context, (PARAMETER) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPARAMETERS_LISTRule()) {
					sequence_PARAMETER_PARAMETERS_LIST(context, (PARAMETER) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.PARAMETERS:
				if (rule == grammarAccess.getParametersRule()) {
					sequence_PARAMETER_PARAMETERS_LIST_Parameters(context, (Parameters) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignatureRule()) {
					sequence_PARAMETER_PARAMETERS_LIST_Parameters_Signature(context, (Parameters) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			case GoPackage.TIPO:
				sequence_TIPO(context, (TIPO) semanticObject); 
				return; 
			case GoPackage.VAR_DECL:
				sequence_VarDecl(context, (VarDecl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BLOCK returns BLOCK
	 *
	 * Constraint:
	 *     listaDeComandos+=EXPRESSAO*
	 */
	protected void sequence_BLOCK(ISerializationContext context, BLOCK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EXPRESSAO returns EXPRESSAO
	 *
	 * Constraint:
	 *     (basic=LITERAIS_BASICOS | declFunction=FunctionType | variaveis=VarDecl)
	 */
	protected void sequence_EXPRESSAO(ISerializationContext context, EXPRESSAO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionType returns FunctionType
	 *
	 * Constraint:
	 *     (nome=ID assinatura=Signature bloco=BLOCK?)
	 */
	protected void sequence_FunctionType(ISerializationContext context, FunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GoDecl returns GoDecl
	 *
	 * Constraint:
	 *     (var=VarDecl | func=FunctionType)
	 */
	protected void sequence_GoDecl(ISerializationContext context, GoDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IGUAL returns IGUAL
	 *
	 * Constraint:
	 *     igual='='
	 */
	protected void sequence_IGUAL(ISerializationContext context, IGUAL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.IGUAL__IGUAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.IGUAL__IGUAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIGUALAccess().getIgualEqualsSignKeyword_0(), semanticObject.getIgual());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Init returns Init
	 *
	 * Constraint:
	 *     elements+=GoDecl+
	 */
	protected void sequence_Init(ISerializationContext context, Init semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LITERAIS_BASICOS returns LITERAIS_BASICOS
	 *
	 * Constraint:
	 *     (numero=NUMERO | string=STRING_DECL)
	 */
	protected void sequence_LITERAIS_BASICOS(ISerializationContext context, LITERAIS_BASICOS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PARAMETER returns PARAMETER
	 *
	 * Constraint:
	 *     (id=ID tipo=Types)
	 */
	protected void sequence_PARAMETER(ISerializationContext context, PARAMETER semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.PARAMETER__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.PARAMETER__ID));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.PARAMETER__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.PARAMETER__TIPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPARAMETERAccess().getIdIDTerminalRuleCall_0_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getPARAMETERAccess().getTipoTypesParserRuleCall_1_0(), semanticObject.getTipo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PARAMETERS_LIST returns PARAMETER
	 *
	 * Constraint:
	 *     (id=ID tipo=Types PARAMETER+=PARAMETER*)
	 */
	protected void sequence_PARAMETER_PARAMETERS_LIST(ISerializationContext context, PARAMETER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (id=ID tipo=Types PARAMETER+=PARAMETER*)?
	 */
	protected void sequence_PARAMETER_PARAMETERS_LIST_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Parameters
	 *
	 * Constraint:
	 *     ((id=ID tipo=Types PARAMETER+=PARAMETER*)? retorno=Result?)
	 */
	protected void sequence_PARAMETER_PARAMETERS_LIST_Parameters_Signature(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Result returns Result
	 *
	 * Constraint:
	 *     (parametros=Parameters | tipo=Types)
	 */
	protected void sequence_Result(ISerializationContext context, Result semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TIPO returns TIPO
	 *
	 * Constraint:
	 *     (variavel='var' | constante='const')
	 */
	protected void sequence_TIPO(ISerializationContext context, TIPO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDecl returns VarDecl
	 *
	 * Constraint:
	 *     (tipoDecl=TIPO id=ID atribuicao=IGUAL expressao=EXPRESSAO)
	 */
	protected void sequence_VarDecl(ISerializationContext context, VarDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_DECL__TIPO_DECL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_DECL__TIPO_DECL));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_DECL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_DECL__ID));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_DECL__ATRIBUICAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_DECL__ATRIBUICAO));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_DECL__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_DECL__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarDeclAccess().getTipoDeclTIPOParserRuleCall_0_0(), semanticObject.getTipoDecl());
		feeder.accept(grammarAccess.getVarDeclAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getVarDeclAccess().getAtribuicaoIGUALParserRuleCall_2_0(), semanticObject.getAtribuicao());
		feeder.accept(grammarAccess.getVarDeclAccess().getExpressaoEXPRESSAOParserRuleCall_3_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
}
