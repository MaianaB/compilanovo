/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.go.impl;

import com.ufcg.compiler.go.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GoFactoryImpl extends EFactoryImpl implements GoFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GoFactory init()
  {
    try
    {
      GoFactory theGoFactory = (GoFactory)EPackage.Registry.INSTANCE.getEFactory(GoPackage.eNS_URI);
      if (theGoFactory != null)
      {
        return theGoFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GoFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GoPackage.INIT: return createInit();
      case GoPackage.GO_DECL: return createGoDecl();
      case GoPackage.VAR_DECL: return createVarDecl();
      case GoPackage.TIPO: return createTIPO();
      case GoPackage.IGUAL: return createIGUAL();
      case GoPackage.EXPRESSAO: return createEXPRESSAO();
      case GoPackage.LITERAIS_BASICOS: return createLITERAIS_BASICOS();
      case GoPackage.FUNCAO: return createFUNCAO();
      case GoPackage.BLOCK: return createBLOCK();
      case GoPackage.PARAMETERS_LIST: return createPARAMETERS_LIST();
      case GoPackage.PARAMETER: return createPARAMETER();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Init createInit()
  {
    InitImpl init = new InitImpl();
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoDecl createGoDecl()
  {
    GoDeclImpl goDecl = new GoDeclImpl();
    return goDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TIPO createTIPO()
  {
    TIPOImpl tipo = new TIPOImpl();
    return tipo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IGUAL createIGUAL()
  {
    IGUALImpl igual = new IGUALImpl();
    return igual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EXPRESSAO createEXPRESSAO()
  {
    EXPRESSAOImpl expressao = new EXPRESSAOImpl();
    return expressao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LITERAIS_BASICOS createLITERAIS_BASICOS()
  {
    LITERAIS_BASICOSImpl literaiS_BASICOS = new LITERAIS_BASICOSImpl();
    return literaiS_BASICOS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FUNCAO createFUNCAO()
  {
    FUNCAOImpl funcao = new FUNCAOImpl();
    return funcao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BLOCK createBLOCK()
  {
    BLOCKImpl block = new BLOCKImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PARAMETERS_LIST createPARAMETERS_LIST()
  {
    PARAMETERS_LISTImpl parameterS_LIST = new PARAMETERS_LISTImpl();
    return parameterS_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PARAMETER createPARAMETER()
  {
    PARAMETERImpl parameter = new PARAMETERImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoPackage getGoPackage()
  {
    return (GoPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GoPackage getPackage()
  {
    return GoPackage.eINSTANCE;
  }

} //GoFactoryImpl
