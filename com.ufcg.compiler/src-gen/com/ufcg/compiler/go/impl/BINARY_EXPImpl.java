/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiler.go.impl;

import com.ufcg.compiler.go.BINARY_EXP;
import com.ufcg.compiler.go.BOOL_OP;
import com.ufcg.compiler.go.GoPackage;
import com.ufcg.compiler.go.LITERAIS_BASICOS;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BINARY EXP</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiler.go.impl.BINARY_EXPImpl#getBasic <em>Basic</em>}</li>
 *   <li>{@link com.ufcg.compiler.go.impl.BINARY_EXPImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link com.ufcg.compiler.go.impl.BINARY_EXPImpl#getArit <em>Arit</em>}</li>
 *   <li>{@link com.ufcg.compiler.go.impl.BINARY_EXPImpl#getBinabasic <em>Binabasic</em>}</li>
 *   <li>{@link com.ufcg.compiler.go.impl.BINARY_EXPImpl#getUnique_basic <em>Unique basic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BINARY_EXPImpl extends MinimalEObjectImpl.Container implements BINARY_EXP
{
  /**
   * The cached value of the '{@link #getBasic() <em>Basic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasic()
   * @generated
   * @ordered
   */
  protected LITERAIS_BASICOS basic;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected BOOL_OP bool;

  /**
   * The default value of the '{@link #getArit() <em>Arit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArit()
   * @generated
   * @ordered
   */
  protected static final String ARIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArit() <em>Arit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArit()
   * @generated
   * @ordered
   */
  protected String arit = ARIT_EDEFAULT;

  /**
   * The cached value of the '{@link #getBinabasic() <em>Binabasic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinabasic()
   * @generated
   * @ordered
   */
  protected BINARY_EXP binabasic;

  /**
   * The cached value of the '{@link #getUnique_basic() <em>Unique basic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnique_basic()
   * @generated
   * @ordered
   */
  protected LITERAIS_BASICOS unique_basic;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BINARY_EXPImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.BINARY_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LITERAIS_BASICOS getBasic()
  {
    return basic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBasic(LITERAIS_BASICOS newBasic, NotificationChain msgs)
  {
    LITERAIS_BASICOS oldBasic = basic;
    basic = newBasic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BASIC, oldBasic, newBasic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBasic(LITERAIS_BASICOS newBasic)
  {
    if (newBasic != basic)
    {
      NotificationChain msgs = null;
      if (basic != null)
        msgs = ((InternalEObject)basic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BASIC, null, msgs);
      if (newBasic != null)
        msgs = ((InternalEObject)newBasic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BASIC, null, msgs);
      msgs = basicSetBasic(newBasic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BASIC, newBasic, newBasic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL_OP getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBool(BOOL_OP newBool, NotificationChain msgs)
  {
    BOOL_OP oldBool = bool;
    bool = newBool;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BOOL, oldBool, newBool);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBool(BOOL_OP newBool)
  {
    if (newBool != bool)
    {
      NotificationChain msgs = null;
      if (bool != null)
        msgs = ((InternalEObject)bool).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BOOL, null, msgs);
      if (newBool != null)
        msgs = ((InternalEObject)newBool).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BOOL, null, msgs);
      msgs = basicSetBool(newBool, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BOOL, newBool, newBool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getArit()
  {
    return arit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArit(String newArit)
  {
    String oldArit = arit;
    arit = newArit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__ARIT, oldArit, arit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BINARY_EXP getBinabasic()
  {
    return binabasic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBinabasic(BINARY_EXP newBinabasic, NotificationChain msgs)
  {
    BINARY_EXP oldBinabasic = binabasic;
    binabasic = newBinabasic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BINABASIC, oldBinabasic, newBinabasic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBinabasic(BINARY_EXP newBinabasic)
  {
    if (newBinabasic != binabasic)
    {
      NotificationChain msgs = null;
      if (binabasic != null)
        msgs = ((InternalEObject)binabasic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BINABASIC, null, msgs);
      if (newBinabasic != null)
        msgs = ((InternalEObject)newBinabasic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BINABASIC, null, msgs);
      msgs = basicSetBinabasic(newBinabasic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BINABASIC, newBinabasic, newBinabasic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LITERAIS_BASICOS getUnique_basic()
  {
    return unique_basic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnique_basic(LITERAIS_BASICOS newUnique_basic, NotificationChain msgs)
  {
    LITERAIS_BASICOS oldUnique_basic = unique_basic;
    unique_basic = newUnique_basic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__UNIQUE_BASIC, oldUnique_basic, newUnique_basic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnique_basic(LITERAIS_BASICOS newUnique_basic)
  {
    if (newUnique_basic != unique_basic)
    {
      NotificationChain msgs = null;
      if (unique_basic != null)
        msgs = ((InternalEObject)unique_basic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__UNIQUE_BASIC, null, msgs);
      if (newUnique_basic != null)
        msgs = ((InternalEObject)newUnique_basic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__UNIQUE_BASIC, null, msgs);
      msgs = basicSetUnique_basic(newUnique_basic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__UNIQUE_BASIC, newUnique_basic, newUnique_basic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return basicSetBasic(null, msgs);
      case GoPackage.BINARY_EXP__BOOL:
        return basicSetBool(null, msgs);
      case GoPackage.BINARY_EXP__BINABASIC:
        return basicSetBinabasic(null, msgs);
      case GoPackage.BINARY_EXP__UNIQUE_BASIC:
        return basicSetUnique_basic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return getBasic();
      case GoPackage.BINARY_EXP__BOOL:
        return getBool();
      case GoPackage.BINARY_EXP__ARIT:
        return getArit();
      case GoPackage.BINARY_EXP__BINABASIC:
        return getBinabasic();
      case GoPackage.BINARY_EXP__UNIQUE_BASIC:
        return getUnique_basic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        setBasic((LITERAIS_BASICOS)newValue);
        return;
      case GoPackage.BINARY_EXP__BOOL:
        setBool((BOOL_OP)newValue);
        return;
      case GoPackage.BINARY_EXP__ARIT:
        setArit((String)newValue);
        return;
      case GoPackage.BINARY_EXP__BINABASIC:
        setBinabasic((BINARY_EXP)newValue);
        return;
      case GoPackage.BINARY_EXP__UNIQUE_BASIC:
        setUnique_basic((LITERAIS_BASICOS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        setBasic((LITERAIS_BASICOS)null);
        return;
      case GoPackage.BINARY_EXP__BOOL:
        setBool((BOOL_OP)null);
        return;
      case GoPackage.BINARY_EXP__ARIT:
        setArit(ARIT_EDEFAULT);
        return;
      case GoPackage.BINARY_EXP__BINABASIC:
        setBinabasic((BINARY_EXP)null);
        return;
      case GoPackage.BINARY_EXP__UNIQUE_BASIC:
        setUnique_basic((LITERAIS_BASICOS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return basic != null;
      case GoPackage.BINARY_EXP__BOOL:
        return bool != null;
      case GoPackage.BINARY_EXP__ARIT:
        return ARIT_EDEFAULT == null ? arit != null : !ARIT_EDEFAULT.equals(arit);
      case GoPackage.BINARY_EXP__BINABASIC:
        return binabasic != null;
      case GoPackage.BINARY_EXP__UNIQUE_BASIC:
        return unique_basic != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (arit: ");
    result.append(arit);
    result.append(')');
    return result.toString();
  }

} //BINARY_EXPImpl
