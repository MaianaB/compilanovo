/*
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Init");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsGoDeclParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Init:
		//	elements+=GoDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=GoDecl*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//GoDecl
		public RuleCall getElementsGoDeclParserRuleCall_0() { return cElementsGoDeclParserRuleCall_0; }
	}
	public class BOOLEAN_VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BOOLEAN_VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVerdadeiroAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVerdadeiroTrueKeyword_0_0 = (Keyword)cVerdadeiroAssignment_0.eContents().get(0);
		private final Assignment cFalsoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFalsoFalseKeyword_1_0 = (Keyword)cFalsoAssignment_1.eContents().get(0);
		
		//BOOLEAN_VALUE:
		//	=> verdadeiro="true" | => falso="false";
		@Override public ParserRule getRule() { return rule; }
		
		//=> verdadeiro="true" | => falso="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> verdadeiro="true"
		public Assignment getVerdadeiroAssignment_0() { return cVerdadeiroAssignment_0; }
		
		//"true"
		public Keyword getVerdadeiroTrueKeyword_0_0() { return cVerdadeiroTrueKeyword_0_0; }
		
		//=> falso="false"
		public Assignment getFalsoAssignment_1() { return cFalsoAssignment_1; }
		
		//"false"
		public Keyword getFalsoFalseKeyword_1_0() { return cFalsoFalseKeyword_1_0; }
	}
	public class GoDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.GoDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVarDeclParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuncFunctionTypeParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Assignment cExpressaoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressaoEXPRESSAOLINHAParserRuleCall_2_0 = (RuleCall)cExpressaoAssignment_2.eContents().get(0);
		
		//GoDecl:
		//	var=VarDecl | func=FunctionType | expressao=EXPRESSAOLINHA;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VarDecl | func=FunctionType | expressao=EXPRESSAOLINHA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=VarDecl
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VarDecl
		public RuleCall getVarVarDeclParserRuleCall_0_0() { return cVarVarDeclParserRuleCall_0_0; }
		
		//func=FunctionType
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//FunctionType
		public RuleCall getFuncFunctionTypeParserRuleCall_1_0() { return cFuncFunctionTypeParserRuleCall_1_0; }
		
		//expressao=EXPRESSAOLINHA
		public Assignment getExpressaoAssignment_2() { return cExpressaoAssignment_2; }
		
		//EXPRESSAOLINHA
		public RuleCall getExpressaoEXPRESSAOLINHAParserRuleCall_2_0() { return cExpressaoEXPRESSAOLINHAParserRuleCall_2_0; }
	}
	public class ForDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClauseAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClauseForClauseParserRuleCall_1_0_0 = (RuleCall)cClauseAssignment_1_0.eContents().get(0);
		private final Assignment cRangeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRangeRangeDeclParserRuleCall_1_1_0 = (RuleCall)cRangeAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandosGoDeclParserRuleCall_3_0 = (RuleCall)cComandosAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForDecl:
		//	"for" (=> clause=ForClause | range=RangeDecl) "{" comandos=GoDecl? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (=> clause=ForClause | range=RangeDecl) "{" comandos=GoDecl? "}"
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//=> clause=ForClause | range=RangeDecl
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> clause=ForClause
		public Assignment getClauseAssignment_1_0() { return cClauseAssignment_1_0; }
		
		//ForClause
		public RuleCall getClauseForClauseParserRuleCall_1_0_0() { return cClauseForClauseParserRuleCall_1_0_0; }
		
		//range=RangeDecl
		public Assignment getRangeAssignment_1_1() { return cRangeAssignment_1_1; }
		
		//RangeDecl
		public RuleCall getRangeRangeDeclParserRuleCall_1_1_0() { return cRangeRangeDeclParserRuleCall_1_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//comandos=GoDecl?
		public Assignment getComandosAssignment_3() { return cComandosAssignment_3; }
		
		//GoDecl
		public RuleCall getComandosGoDeclParserRuleCall_3_0() { return cComandosGoDeclParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RangeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RangeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdListIDListParserRuleCall_1_0 = (RuleCall)cIdListAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIgualAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIgualIGUALParserRuleCall_2_0_0 = (RuleCall)cIgualAssignment_2_0.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOpPONTOSIGUALParserRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Keyword cRangeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cVariavelAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cVariavelVarCallParserRuleCall_4_0_0 = (RuleCall)cVariavelAssignment_4_0.eContents().get(0);
		private final Assignment cFuncAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFuncFunctionCallParserRuleCall_4_1_0 = (RuleCall)cFuncAssignment_4_1.eContents().get(0);
		
		//RangeDecl:
		//	{RangeDecl} idList+=IDList (igual=IGUAL | op=PONTOSIGUAL) "range" (variavel=VarCall | func=FunctionCall);
		@Override public ParserRule getRule() { return rule; }
		
		//{RangeDecl} idList+=IDList (igual=IGUAL | op=PONTOSIGUAL) "range" (variavel=VarCall | func=FunctionCall)
		public Group getGroup() { return cGroup; }
		
		//{RangeDecl}
		public Action getRangeDeclAction_0() { return cRangeDeclAction_0; }
		
		//idList+=IDList
		public Assignment getIdListAssignment_1() { return cIdListAssignment_1; }
		
		//IDList
		public RuleCall getIdListIDListParserRuleCall_1_0() { return cIdListIDListParserRuleCall_1_0; }
		
		//igual=IGUAL | op=PONTOSIGUAL
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//igual=IGUAL
		public Assignment getIgualAssignment_2_0() { return cIgualAssignment_2_0; }
		
		//IGUAL
		public RuleCall getIgualIGUALParserRuleCall_2_0_0() { return cIgualIGUALParserRuleCall_2_0_0; }
		
		//op=PONTOSIGUAL
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//PONTOSIGUAL
		public RuleCall getOpPONTOSIGUALParserRuleCall_2_1_0() { return cOpPONTOSIGUALParserRuleCall_2_1_0; }
		
		//"range"
		public Keyword getRangeKeyword_3() { return cRangeKeyword_3; }
		
		//variavel=VarCall | func=FunctionCall
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//variavel=VarCall
		public Assignment getVariavelAssignment_4_0() { return cVariavelAssignment_4_0; }
		
		//VarCall
		public RuleCall getVariavelVarCallParserRuleCall_4_0_0() { return cVariavelVarCallParserRuleCall_4_0_0; }
		
		//func=FunctionCall
		public Assignment getFuncAssignment_4_1() { return cFuncAssignment_4_1; }
		
		//FunctionCall
		public RuleCall getFuncFunctionCallParserRuleCall_4_1_0() { return cFuncFunctionCallParserRuleCall_4_1_0; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitInitStmtParserRuleCall_1_0 = (RuleCall)cInitAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPostAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPostPostStmtParserRuleCall_5_0 = (RuleCall)cPostAssignment_5.eContents().get(0);
		
		//ForClause:
		//	{ForClause} init=InitStmt? ";" condition=Condition? ";" post=PostStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForClause} init=InitStmt? ";" condition=Condition? ";" post=PostStmt?
		public Group getGroup() { return cGroup; }
		
		//{ForClause}
		public Action getForClauseAction_0() { return cForClauseAction_0; }
		
		//init=InitStmt?
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }
		
		//InitStmt
		public RuleCall getInitInitStmtParserRuleCall_1_0() { return cInitInitStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//post=PostStmt?
		public Assignment getPostAssignment_5() { return cPostAssignment_5; }
		
		//PostStmt
		public RuleCall getPostPostStmtParserRuleCall_5_0() { return cPostPostStmtParserRuleCall_5_0; }
	}
	public class InitStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InitStmt");
		private final Assignment cVarDeclAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarDeclVarDeclParserRuleCall_0 = (RuleCall)cVarDeclAssignment.eContents().get(0);
		
		//InitStmt:
		//	varDecl=VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//varDecl=VarDecl
		public Assignment getVarDeclAssignment() { return cVarDeclAssignment; }
		
		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_0() { return cVarDeclVarDeclParserRuleCall_0; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PostStmt");
		private final Assignment cArtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArtARIT_EXPRParserRuleCall_0 = (RuleCall)cArtAssignment.eContents().get(0);
		
		//PostStmt:
		//	=> art=ARIT_EXPR;
		@Override public ParserRule getRule() { return rule; }
		
		//=> art=ARIT_EXPR
		public Assignment getArtAssignment() { return cArtAssignment; }
		
		//ARIT_EXPR
		public RuleCall getArtARIT_EXPRParserRuleCall_0() { return cArtARIT_EXPRParserRuleCall_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr1EXPRESSAOParserRuleCall_0_0 = (RuleCall)cExpr1Assignment_0.eContents().get(0);
		private final Assignment cComparadorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComparadorCOMPARISONParserRuleCall_1_0 = (RuleCall)cComparadorAssignment_1.eContents().get(0);
		private final Assignment cExpr2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpr2EXPRESSAOParserRuleCall_2_0 = (RuleCall)cExpr2Assignment_2.eContents().get(0);
		
		//Condition:
		//	expr1=EXPRESSAO comparador=COMPARISON expr2=EXPRESSAO;
		@Override public ParserRule getRule() { return rule; }
		
		//expr1=EXPRESSAO comparador=COMPARISON expr2=EXPRESSAO
		public Group getGroup() { return cGroup; }
		
		//expr1=EXPRESSAO
		public Assignment getExpr1Assignment_0() { return cExpr1Assignment_0; }
		
		//EXPRESSAO
		public RuleCall getExpr1EXPRESSAOParserRuleCall_0_0() { return cExpr1EXPRESSAOParserRuleCall_0_0; }
		
		//comparador=COMPARISON
		public Assignment getComparadorAssignment_1() { return cComparadorAssignment_1; }
		
		//COMPARISON
		public RuleCall getComparadorCOMPARISONParserRuleCall_1_0() { return cComparadorCOMPARISONParserRuleCall_1_0; }
		
		//expr2=EXPRESSAO
		public Assignment getExpr2Assignment_2() { return cExpr2Assignment_2; }
		
		//EXPRESSAO
		public RuleCall getExpr2EXPRESSAOParserRuleCall_2_0() { return cExpr2EXPRESSAOParserRuleCall_2_0; }
	}
	public class IDListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IDList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdListIDTerminalRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdListIDTerminalRuleCall_1_0_0 = (RuleCall)cIdListAssignment_1_0.eContents().get(0);
		private final Assignment cVirAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVirVIRGULATerminalRuleCall_1_1_0 = (RuleCall)cVirAssignment_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cListIDListParserRuleCall_1_2_0 = (RuleCall)cListAssignment_1_2.eContents().get(0);
		
		//IDList:
		//	idList+=Terminals::ID | idList+=Terminals::ID vir+=VIRGULA list+=IDList;
		@Override public ParserRule getRule() { return rule; }
		
		//idList+=Terminals::ID | idList+=Terminals::ID vir+=VIRGULA list+=IDList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//idList+=Terminals::ID
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }
		
		//Terminals::ID
		public RuleCall getIdListIDTerminalRuleCall_0_0() { return cIdListIDTerminalRuleCall_0_0; }
		
		//idList+=Terminals::ID vir+=VIRGULA list+=IDList
		public Group getGroup_1() { return cGroup_1; }
		
		//idList+=Terminals::ID
		public Assignment getIdListAssignment_1_0() { return cIdListAssignment_1_0; }
		
		//Terminals::ID
		public RuleCall getIdListIDTerminalRuleCall_1_0_0() { return cIdListIDTerminalRuleCall_1_0_0; }
		
		//vir+=VIRGULA
		public Assignment getVirAssignment_1_1() { return cVirAssignment_1_1; }
		
		//VIRGULA
		public RuleCall getVirVIRGULATerminalRuleCall_1_1_0() { return cVirVIRGULATerminalRuleCall_1_1_0; }
		
		//list+=IDList
		public Assignment getListAssignment_1_2() { return cListAssignment_1_2; }
		
		//IDList
		public RuleCall getListIDListParserRuleCall_1_2_0() { return cListIDListParserRuleCall_1_2_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureSignatureDelParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAtribuicaoAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAtribuicaoIGUALParserRuleCall_1_0_0 = (RuleCall)cAtribuicaoAssignment_1_0.eContents().get(0);
		private final Assignment cProntAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cProntPONTOSIGUALParserRuleCall_1_1_0 = (RuleCall)cProntAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArrayArrayTypeParserRuleCall_2_0_0 = (RuleCall)cArrayAssignment_2_0.eContents().get(0);
		private final Assignment cExpressaoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressaoEXPRESSAOLINHAParserRuleCall_2_1_0 = (RuleCall)cExpressaoAssignment_2_1.eContents().get(0);
		
		//VarDecl:
		//	signature=SignatureDel (atribuicao=IGUAL | pront=PONTOSIGUAL)? (array=ArrayType? expressao=EXPRESSAOLINHA)?;
		@Override public ParserRule getRule() { return rule; }
		
		//signature=SignatureDel (atribuicao=IGUAL | pront=PONTOSIGUAL)? (array=ArrayType? expressao=EXPRESSAOLINHA)?
		public Group getGroup() { return cGroup; }
		
		//signature=SignatureDel
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//SignatureDel
		public RuleCall getSignatureSignatureDelParserRuleCall_0_0() { return cSignatureSignatureDelParserRuleCall_0_0; }
		
		//(atribuicao=IGUAL | pront=PONTOSIGUAL)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//atribuicao=IGUAL
		public Assignment getAtribuicaoAssignment_1_0() { return cAtribuicaoAssignment_1_0; }
		
		//IGUAL
		public RuleCall getAtribuicaoIGUALParserRuleCall_1_0_0() { return cAtribuicaoIGUALParserRuleCall_1_0_0; }
		
		//pront=PONTOSIGUAL
		public Assignment getProntAssignment_1_1() { return cProntAssignment_1_1; }
		
		//PONTOSIGUAL
		public RuleCall getProntPONTOSIGUALParserRuleCall_1_1_0() { return cProntPONTOSIGUALParserRuleCall_1_1_0; }
		
		//(array=ArrayType? expressao=EXPRESSAOLINHA)?
		public Group getGroup_2() { return cGroup_2; }
		
		//array=ArrayType?
		public Assignment getArrayAssignment_2_0() { return cArrayAssignment_2_0; }
		
		//ArrayType
		public RuleCall getArrayArrayTypeParserRuleCall_2_0_0() { return cArrayArrayTypeParserRuleCall_2_0_0; }
		
		//expressao=EXPRESSAOLINHA
		public Assignment getExpressaoAssignment_2_1() { return cExpressaoAssignment_2_1; }
		
		//EXPRESSAOLINHA
		public RuleCall getExpressaoEXPRESSAOLINHAParserRuleCall_2_1_0() { return cExpressaoEXPRESSAOLINHAParserRuleCall_2_1_0; }
	}
	public class SignatureDelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SignatureDel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoDeclTIPOParserRuleCall_0_0 = (RuleCall)cTipoDeclAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//SignatureDel:
		//	tipoDecl=TIPO id=Terminals::ID type=Types?;
		@Override public ParserRule getRule() { return rule; }
		
		//tipoDecl=TIPO id=Terminals::ID type=Types?
		public Group getGroup() { return cGroup; }
		
		//tipoDecl=TIPO
		public Assignment getTipoDeclAssignment_0() { return cTipoDeclAssignment_0; }
		
		//TIPO
		public RuleCall getTipoDeclTIPOParserRuleCall_0_0() { return cTipoDeclTIPOParserRuleCall_0_0; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//type=Types?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Types
		public RuleCall getTypeTypesParserRuleCall_2_0() { return cTypeTypesParserRuleCall_2_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQtdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQtdNUMEROTerminalRuleCall_1_1_0 = (RuleCall)cQtdAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIgualAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIgualIGUALParserRuleCall_2_0_0 = (RuleCall)cIgualAssignment_2_0.eContents().get(0);
		private final Assignment cDoisAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDoisPONTOSIGUALParserRuleCall_2_1_0 = (RuleCall)cDoisAssignment_2_1.eContents().get(0);
		private final Assignment cExpressaoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressaoEXPRESSAOLINHAParserRuleCall_3_0 = (RuleCall)cExpressaoAssignment_3.eContents().get(0);
		
		//Assignment:
		//	id=Terminals::ID ("[" qtd=NUMERO "]")? (igual=IGUAL | dois=PONTOSIGUAL) expressao=EXPRESSAOLINHA;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Terminals::ID ("[" qtd=NUMERO "]")? (igual=IGUAL | dois=PONTOSIGUAL) expressao=EXPRESSAOLINHA
		public Group getGroup() { return cGroup; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//("[" qtd=NUMERO "]")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//qtd=NUMERO
		public Assignment getQtdAssignment_1_1() { return cQtdAssignment_1_1; }
		
		//NUMERO
		public RuleCall getQtdNUMEROTerminalRuleCall_1_1_0() { return cQtdNUMEROTerminalRuleCall_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//igual=IGUAL | dois=PONTOSIGUAL
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//igual=IGUAL
		public Assignment getIgualAssignment_2_0() { return cIgualAssignment_2_0; }
		
		//IGUAL
		public RuleCall getIgualIGUALParserRuleCall_2_0_0() { return cIgualIGUALParserRuleCall_2_0_0; }
		
		//dois=PONTOSIGUAL
		public Assignment getDoisAssignment_2_1() { return cDoisAssignment_2_1; }
		
		//PONTOSIGUAL
		public RuleCall getDoisPONTOSIGUALParserRuleCall_2_1_0() { return cDoisPONTOSIGUALParserRuleCall_2_1_0; }
		
		//expressao=EXPRESSAOLINHA
		public Assignment getExpressaoAssignment_3() { return cExpressaoAssignment_3; }
		
		//EXPRESSAOLINHA
		public RuleCall getExpressaoEXPRESSAOLINHAParserRuleCall_3_0() { return cExpressaoEXPRESSAOLINHAParserRuleCall_3_0; }
	}
	public class TIPOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TIPO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariavelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariavelVarParserRuleCall_0_0 = (RuleCall)cVariavelAssignment_0.eContents().get(0);
		private final Assignment cConstanteAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstanteConstParserRuleCall_1_0 = (RuleCall)cConstanteAssignment_1.eContents().get(0);
		
		//TIPO:
		//	variavel=Var | constante=Const;
		@Override public ParserRule getRule() { return rule; }
		
		//variavel=Var | constante=Const
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variavel=Var
		public Assignment getVariavelAssignment_0() { return cVariavelAssignment_0; }
		
		//Var
		public RuleCall getVariavelVarParserRuleCall_0_0() { return cVariavelVarParserRuleCall_0_0; }
		
		//constante=Const
		public Assignment getConstanteAssignment_1() { return cConstanteAssignment_1; }
		
		//Const
		public RuleCall getConstanteConstParserRuleCall_1_0() { return cConstanteConstParserRuleCall_1_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Var");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVarVarKeyword_0 = (Keyword)cVarAssignment.eContents().get(0);
		
		//Var:
		//	var="var";
		@Override public ParserRule getRule() { return rule; }
		
		//var="var"
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//"var"
		public Keyword getVarVarKeyword_0() { return cVarVarKeyword_0; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Const");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConstConstKeyword_0 = (Keyword)cConstAssignment.eContents().get(0);
		
		//Const:
		//	const="const";
		@Override public ParserRule getRule() { return rule; }
		
		//const="const"
		public Assignment getConstAssignment() { return cConstAssignment; }
		
		//"const"
		public Keyword getConstConstKeyword_0() { return cConstConstKeyword_0; }
	}
	public class IGUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IGUAL");
		private final Assignment cIgualAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIgualEqualsSignKeyword_0 = (Keyword)cIgualAssignment.eContents().get(0);
		
		//IGUAL:
		//	igual="=";
		@Override public ParserRule getRule() { return rule; }
		
		//igual="="
		public Assignment getIgualAssignment() { return cIgualAssignment; }
		
		//"="
		public Keyword getIgualEqualsSignKeyword_0() { return cIgualEqualsSignKeyword_0; }
	}
	public class PONTOSIGUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PONTOSIGUAL");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOpColonEqualsSignKeyword_0 = (Keyword)cOpAssignment.eContents().get(0);
		
		//PONTOSIGUAL:
		//	op=":=";
		@Override public ParserRule getRule() { return rule; }
		
		//op=":="
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//":="
		public Keyword getOpColonEqualsSignKeyword_0() { return cOpColonEqualsSignKeyword_0; }
	}
	public class EXPRESSAOLINHAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EXPRESSAOLINHA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpEXPRESSAOParserRuleCall_0_0_0 = (RuleCall)cExpAssignment_0_0.eContents().get(0);
		private final Assignment cExplinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExplinhaEXPRESSAOLINHAParserRuleCall_0_1_0 = (RuleCall)cExplinhaAssignment_0_1.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpEXPRESSAOParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//EXPRESSAOLINHA:
		//	exp=EXPRESSAO explinha=EXPRESSAOLINHA | exp=EXPRESSAO;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=EXPRESSAO explinha=EXPRESSAOLINHA | exp=EXPRESSAO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exp=EXPRESSAO explinha=EXPRESSAOLINHA
		public Group getGroup_0() { return cGroup_0; }
		
		//exp=EXPRESSAO
		public Assignment getExpAssignment_0_0() { return cExpAssignment_0_0; }
		
		//EXPRESSAO
		public RuleCall getExpEXPRESSAOParserRuleCall_0_0_0() { return cExpEXPRESSAOParserRuleCall_0_0_0; }
		
		//explinha=EXPRESSAOLINHA
		public Assignment getExplinhaAssignment_0_1() { return cExplinhaAssignment_0_1; }
		
		//EXPRESSAOLINHA
		public RuleCall getExplinhaEXPRESSAOLINHAParserRuleCall_0_1_0() { return cExplinhaEXPRESSAOLINHAParserRuleCall_0_1_0; }
		
		//exp=EXPRESSAO
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//EXPRESSAO
		public RuleCall getExpEXPRESSAOParserRuleCall_1_0() { return cExpEXPRESSAOParserRuleCall_1_0; }
	}
	public class EXPRESSAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EXPRESSAO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEXPRESSAOAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDeclFunctionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclFunctionFunctionTypeParserRuleCall_0_1_0 = (RuleCall)cDeclFunctionAssignment_0_1.eContents().get(0);
		private final Assignment cBinary_expAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBinary_expBINARY_EXPParserRuleCall_1_0 = (RuleCall)cBinary_expAssignment_1.eContents().get(0);
		private final Assignment cBasicAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBasicLITERAIS_BASICOSParserRuleCall_2_0 = (RuleCall)cBasicAssignment_2.eContents().get(0);
		private final Assignment cAssignmentAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentAssignmentParserRuleCall_3_0 = (RuleCall)cAssignmentAssignment_3.eContents().get(0);
		private final Assignment cForAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cForForDeclParserRuleCall_4_0 = (RuleCall)cForAssignment_4.eContents().get(0);
		private final Assignment cArrayValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cArrayValueArrayValueParserRuleCall_5_0 = (RuleCall)cArrayValueAssignment_5.eContents().get(0);
		private final Assignment cVariaveisAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cVariaveisVarDeclParserRuleCall_6_0 = (RuleCall)cVariaveisAssignment_6.eContents().get(0);
		private final Assignment cChamAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cChamChamadaParserRuleCall_7_0 = (RuleCall)cChamAssignment_7.eContents().get(0);
		private final Assignment cIfAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cIfIfStmtParserRuleCall_8_0 = (RuleCall)cIfAssignment_8.eContents().get(0);
		
		//EXPRESSAO:
		//	{EXPRESSAO} declFunction=FunctionType | binary_exp=BINARY_EXP | basic=LITERAIS_BASICOS | assignment=Assignment |
		//	for=ForDecl | arrayValue=ArrayValue | variaveis=VarDecl | cham=Chamada | if=IfStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//{EXPRESSAO} declFunction=FunctionType | binary_exp=BINARY_EXP | basic=LITERAIS_BASICOS | assignment=Assignment |
		//for=ForDecl | arrayValue=ArrayValue | variaveis=VarDecl | cham=Chamada | if=IfStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EXPRESSAO} declFunction=FunctionType
		public Group getGroup_0() { return cGroup_0; }
		
		//{EXPRESSAO}
		public Action getEXPRESSAOAction_0_0() { return cEXPRESSAOAction_0_0; }
		
		//declFunction=FunctionType
		public Assignment getDeclFunctionAssignment_0_1() { return cDeclFunctionAssignment_0_1; }
		
		//FunctionType
		public RuleCall getDeclFunctionFunctionTypeParserRuleCall_0_1_0() { return cDeclFunctionFunctionTypeParserRuleCall_0_1_0; }
		
		//binary_exp=BINARY_EXP
		public Assignment getBinary_expAssignment_1() { return cBinary_expAssignment_1; }
		
		//BINARY_EXP
		public RuleCall getBinary_expBINARY_EXPParserRuleCall_1_0() { return cBinary_expBINARY_EXPParserRuleCall_1_0; }
		
		//basic=LITERAIS_BASICOS
		public Assignment getBasicAssignment_2() { return cBasicAssignment_2; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicLITERAIS_BASICOSParserRuleCall_2_0() { return cBasicLITERAIS_BASICOSParserRuleCall_2_0; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_3() { return cAssignmentAssignment_3; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_3_0() { return cAssignmentAssignmentParserRuleCall_3_0; }
		
		//for=ForDecl
		public Assignment getForAssignment_4() { return cForAssignment_4; }
		
		//ForDecl
		public RuleCall getForForDeclParserRuleCall_4_0() { return cForForDeclParserRuleCall_4_0; }
		
		//arrayValue=ArrayValue
		public Assignment getArrayValueAssignment_5() { return cArrayValueAssignment_5; }
		
		//ArrayValue
		public RuleCall getArrayValueArrayValueParserRuleCall_5_0() { return cArrayValueArrayValueParserRuleCall_5_0; }
		
		//variaveis=VarDecl
		public Assignment getVariaveisAssignment_6() { return cVariaveisAssignment_6; }
		
		//VarDecl
		public RuleCall getVariaveisVarDeclParserRuleCall_6_0() { return cVariaveisVarDeclParserRuleCall_6_0; }
		
		//cham=Chamada
		public Assignment getChamAssignment_7() { return cChamAssignment_7; }
		
		//Chamada
		public RuleCall getChamChamadaParserRuleCall_7_0() { return cChamChamadaParserRuleCall_7_0; }
		
		//if=IfStmt
		public Assignment getIfAssignment_8() { return cIfAssignment_8; }
		
		//IfStmt
		public RuleCall getIfIfStmtParserRuleCall_8_0() { return cIfIfStmtParserRuleCall_8_0; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBasicAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBasicLITERAIS_BASICOSParserRuleCall_2_0_0 = (RuleCall)cBasicAssignment_2_0.eContents().get(0);
		private final Assignment cFuncAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFuncFunctionCallParserRuleCall_2_1_0 = (RuleCall)cFuncAssignment_2_1.eContents().get(0);
		private final Assignment cIdVarAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cIdVarVarCallParserRuleCall_2_2_0 = (RuleCall)cIdVarAssignment_2_2.eContents().get(0);
		
		//ReturnStmt:
		//	{ReturnStmt} "return" (basic=LITERAIS_BASICOS | func=FunctionCall | idVar=VarCall)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStmt} "return" (basic=LITERAIS_BASICOS | func=FunctionCall | idVar=VarCall)?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStmt}
		public Action getReturnStmtAction_0() { return cReturnStmtAction_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//(basic=LITERAIS_BASICOS | func=FunctionCall | idVar=VarCall)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//basic=LITERAIS_BASICOS
		public Assignment getBasicAssignment_2_0() { return cBasicAssignment_2_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicLITERAIS_BASICOSParserRuleCall_2_0_0() { return cBasicLITERAIS_BASICOSParserRuleCall_2_0_0; }
		
		//func=FunctionCall
		public Assignment getFuncAssignment_2_1() { return cFuncAssignment_2_1; }
		
		//FunctionCall
		public RuleCall getFuncFunctionCallParserRuleCall_2_1_0() { return cFuncFunctionCallParserRuleCall_2_1_0; }
		
		//idVar=VarCall
		public Assignment getIdVarAssignment_2_2() { return cIdVarAssignment_2_2; }
		
		//VarCall
		public RuleCall getIdVarVarCallParserRuleCall_2_2_0() { return cIdVarVarCallParserRuleCall_2_2_0; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLitLiteraisListParserRuleCall_1_0 = (RuleCall)cLitAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayValue:
		//	"{" lit=LiteraisList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" lit=LiteraisList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//lit=LiteraisList
		public Assignment getLitAssignment_1() { return cLitAssignment_1; }
		
		//LiteraisList
		public RuleCall getLitLiteraisListParserRuleCall_1_0() { return cLitLiteraisListParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class LiteraisListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteraisList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLitLITERAIS_BASICOSParserRuleCall_0_0 = (RuleCall)cLitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLitAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLitLITERAIS_BASICOSParserRuleCall_1_0_0 = (RuleCall)cLitAssignment_1_0.eContents().get(0);
		private final Assignment cVirAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVirVIRGULATerminalRuleCall_1_1_0 = (RuleCall)cVirAssignment_1_1.eContents().get(0);
		private final Assignment cLitAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLitLiteraisListParserRuleCall_1_2_0 = (RuleCall)cLitAssignment_1_2.eContents().get(0);
		
		//LiteraisList:
		//	lit+=LITERAIS_BASICOS | lit+=LITERAIS_BASICOS vir=VIRGULA lit+=LiteraisList;
		@Override public ParserRule getRule() { return rule; }
		
		//lit+=LITERAIS_BASICOS | lit+=LITERAIS_BASICOS vir=VIRGULA lit+=LiteraisList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lit+=LITERAIS_BASICOS
		public Assignment getLitAssignment_0() { return cLitAssignment_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getLitLITERAIS_BASICOSParserRuleCall_0_0() { return cLitLITERAIS_BASICOSParserRuleCall_0_0; }
		
		//lit+=LITERAIS_BASICOS vir=VIRGULA lit+=LiteraisList
		public Group getGroup_1() { return cGroup_1; }
		
		//lit+=LITERAIS_BASICOS
		public Assignment getLitAssignment_1_0() { return cLitAssignment_1_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getLitLITERAIS_BASICOSParserRuleCall_1_0_0() { return cLitLITERAIS_BASICOSParserRuleCall_1_0_0; }
		
		//vir=VIRGULA
		public Assignment getVirAssignment_1_1() { return cVirAssignment_1_1; }
		
		//VIRGULA
		public RuleCall getVirVIRGULATerminalRuleCall_1_1_0() { return cVirVIRGULATerminalRuleCall_1_1_0; }
		
		//lit+=LiteraisList
		public Assignment getLitAssignment_1_2() { return cLitAssignment_1_2; }
		
		//LiteraisList
		public RuleCall getLitLiteraisListParserRuleCall_1_2_0() { return cLitLiteraisListParserRuleCall_1_2_0; }
	}
	public class LITERAIS_BASICOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LITERAIS_BASICOS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumeroAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumeroNUMEROTerminalRuleCall_0_0 = (RuleCall)cNumeroAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRING_DECLTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cBooleanoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanoBOOLEAN_VALUEParserRuleCall_2_0 = (RuleCall)cBooleanoAssignment_2.eContents().get(0);
		
		//LITERAIS_BASICOS:
		//	numero=NUMERO | string=STRING_DECL | booleano=BOOLEAN_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//numero=NUMERO | string=STRING_DECL | booleano=BOOLEAN_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numero=NUMERO
		public Assignment getNumeroAssignment_0() { return cNumeroAssignment_0; }
		
		//NUMERO
		public RuleCall getNumeroNUMEROTerminalRuleCall_0_0() { return cNumeroNUMEROTerminalRuleCall_0_0; }
		
		//string=STRING_DECL
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING_DECL
		public RuleCall getStringSTRING_DECLTerminalRuleCall_1_0() { return cStringSTRING_DECLTerminalRuleCall_1_0; }
		
		//booleano=BOOLEAN_VALUE
		public Assignment getBooleanoAssignment_2() { return cBooleanoAssignment_2; }
		
		//BOOLEAN_VALUE
		public RuleCall getBooleanoBOOLEAN_VALUEParserRuleCall_2_0() { return cBooleanoBOOLEAN_VALUEParserRuleCall_2_0; }
	}
	public class BINARY_EXPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BINARY_EXP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBINARY_EXPAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBasicAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBasicLITERAIS_BASICOSParserRuleCall_1_0_0 = (RuleCall)cBasicAssignment_1_0.eContents().get(0);
		private final Assignment cVarCalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVarCalVarCallParserRuleCall_1_1_0 = (RuleCall)cVarCalAssignment_1_1.eContents().get(0);
		private final Assignment cFuncAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cFuncFunctionCallParserRuleCall_1_2_0 = (RuleCall)cFuncAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBoolAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBoolBOOL_OPParserRuleCall_2_0_0 = (RuleCall)cBoolAssignment_2_0.eContents().get(0);
		private final Assignment cAritAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAritARIT_OPParserRuleCall_2_1_0 = (RuleCall)cAritAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBasicAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBasicLITERAIS_BASICOSParserRuleCall_3_0_0 = (RuleCall)cBasicAssignment_3_0.eContents().get(0);
		private final Assignment cVarCalAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cVarCalVarCallParserRuleCall_3_1_0 = (RuleCall)cVarCalAssignment_3_1.eContents().get(0);
		private final Assignment cFuncAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cFuncFunctionCallParserRuleCall_3_2_0 = (RuleCall)cFuncAssignment_3_2.eContents().get(0);
		
		//BINARY_EXP:
		//	{BINARY_EXP} (basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall) (bool=BOOL_OP | arit=ARIT_OP)
		//	(basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall);
		@Override public ParserRule getRule() { return rule; }
		
		//{BINARY_EXP} (basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall) (bool=BOOL_OP | arit=ARIT_OP)
		//(basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall)
		public Group getGroup() { return cGroup; }
		
		//{BINARY_EXP}
		public Action getBINARY_EXPAction_0() { return cBINARY_EXPAction_0; }
		
		//basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//basic+=LITERAIS_BASICOS
		public Assignment getBasicAssignment_1_0() { return cBasicAssignment_1_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicLITERAIS_BASICOSParserRuleCall_1_0_0() { return cBasicLITERAIS_BASICOSParserRuleCall_1_0_0; }
		
		//varCal+=VarCall
		public Assignment getVarCalAssignment_1_1() { return cVarCalAssignment_1_1; }
		
		//VarCall
		public RuleCall getVarCalVarCallParserRuleCall_1_1_0() { return cVarCalVarCallParserRuleCall_1_1_0; }
		
		//func+=FunctionCall
		public Assignment getFuncAssignment_1_2() { return cFuncAssignment_1_2; }
		
		//FunctionCall
		public RuleCall getFuncFunctionCallParserRuleCall_1_2_0() { return cFuncFunctionCallParserRuleCall_1_2_0; }
		
		//bool=BOOL_OP | arit=ARIT_OP
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//bool=BOOL_OP
		public Assignment getBoolAssignment_2_0() { return cBoolAssignment_2_0; }
		
		//BOOL_OP
		public RuleCall getBoolBOOL_OPParserRuleCall_2_0_0() { return cBoolBOOL_OPParserRuleCall_2_0_0; }
		
		//arit=ARIT_OP
		public Assignment getAritAssignment_2_1() { return cAritAssignment_2_1; }
		
		//ARIT_OP
		public RuleCall getAritARIT_OPParserRuleCall_2_1_0() { return cAritARIT_OPParserRuleCall_2_1_0; }
		
		//basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//basic+=LITERAIS_BASICOS
		public Assignment getBasicAssignment_3_0() { return cBasicAssignment_3_0; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicLITERAIS_BASICOSParserRuleCall_3_0_0() { return cBasicLITERAIS_BASICOSParserRuleCall_3_0_0; }
		
		//varCal+=VarCall
		public Assignment getVarCalAssignment_3_1() { return cVarCalAssignment_3_1; }
		
		//VarCall
		public RuleCall getVarCalVarCallParserRuleCall_3_1_0() { return cVarCalVarCallParserRuleCall_3_1_0; }
		
		//func+=FunctionCall
		public Assignment getFuncAssignment_3_2() { return cFuncAssignment_3_2; }
		
		//FunctionCall
		public RuleCall getFuncFunctionCallParserRuleCall_3_2_0() { return cFuncFunctionCallParserRuleCall_3_2_0; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomeIDTerminalRuleCall_1_0 = (RuleCall)cNomeAssignment_1.eContents().get(0);
		private final Assignment cAssinaturaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssinaturaSignatureParserRuleCall_2_0 = (RuleCall)cAssinaturaAssignment_2.eContents().get(0);
		private final Assignment cBlocoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlocoBLOCKParserRuleCall_3_0 = (RuleCall)cBlocoAssignment_3.eContents().get(0);
		
		//FunctionType:
		//	"func" nome=Terminals::ID assinatura=Signature bloco=BLOCK?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" nome=Terminals::ID assinatura=Signature bloco=BLOCK?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//nome=Terminals::ID
		public Assignment getNomeAssignment_1() { return cNomeAssignment_1; }
		
		//Terminals::ID
		public RuleCall getNomeIDTerminalRuleCall_1_0() { return cNomeIDTerminalRuleCall_1_0; }
		
		//assinatura=Signature
		public Assignment getAssinaturaAssignment_2() { return cAssinaturaAssignment_2; }
		
		//Signature
		public RuleCall getAssinaturaSignatureParserRuleCall_2_0() { return cAssinaturaSignatureParserRuleCall_2_0; }
		
		//bloco=BLOCK?
		public Assignment getBlocoAssignment_3() { return cBlocoAssignment_3; }
		
		//BLOCK
		public RuleCall getBlocoBLOCKParserRuleCall_3_0() { return cBlocoBLOCKParserRuleCall_3_0; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsParametersParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Assignment cRetornoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRetornoTypesParserRuleCall_2_0 = (RuleCall)cRetornoAssignment_2.eContents().get(0);
		
		//Signature:
		//	{Signature} params=Parameters retorno=Types?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} params=Parameters retorno=Types?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//params=Parameters
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//Parameters
		public RuleCall getParamsParametersParserRuleCall_1_0() { return cParamsParametersParserRuleCall_1_0; }
		
		//retorno=Types?
		public Assignment getRetornoAssignment_2() { return cRetornoAssignment_2; }
		
		//Types
		public RuleCall getRetornoTypesParserRuleCall_2_0() { return cRetornoTypesParserRuleCall_2_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cABRE_PARENTESESParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsPARAMETERS_LISTParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final RuleCall cFECHA_PARENTESESParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Parameters:
		//	{Parameters} ABRE_PARENTESES params=PARAMETERS_LIST? FECHA_PARENTESES;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameters} ABRE_PARENTESES params=PARAMETERS_LIST? FECHA_PARENTESES
		public Group getGroup() { return cGroup; }
		
		//{Parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }
		
		//ABRE_PARENTESES
		public RuleCall getABRE_PARENTESESParserRuleCall_1() { return cABRE_PARENTESESParserRuleCall_1; }
		
		//params=PARAMETERS_LIST?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//PARAMETERS_LIST
		public RuleCall getParamsPARAMETERS_LISTParserRuleCall_2_0() { return cParamsPARAMETERS_LISTParserRuleCall_2_0; }
		
		//FECHA_PARENTESES
		public RuleCall getFECHA_PARENTESESParserRuleCall_3() { return cFECHA_PARENTESESParserRuleCall_3; }
	}
	public class ABRE_PARENTESESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ABRE_PARENTESES");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ABRE_PARENTESES:
		//	"(";
		@Override public ParserRule getRule() { return rule; }
		
		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}
	public class FECHA_PARENTESESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FECHA_PARENTESES");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//FECHA_PARENTESES:
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class IfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenEXPRESSAOParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfCondition:
		//	"if" cond=Condition "{" then+=EXPRESSAO* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"if" cond=Condition "{" then+=EXPRESSAO* "}"
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Condition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_1_0() { return cCondConditionParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//then+=EXPRESSAO*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//EXPRESSAO
		public RuleCall getThenEXPRESSAOParserRuleCall_3_0() { return cThenEXPRESSAOParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ElseIfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElseIfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIfConditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElseIfCondition:
		//	=> "else" IfCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//=> "else" IfCondition
		public Group getGroup() { return cGroup; }
		
		//=> "else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//IfCondition
		public RuleCall getIfConditionParserRuleCall_1() { return cIfConditionParserRuleCall_1; }
	}
	public class ElseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElseCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenEXPRESSAOParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ElseCondition:
		//	{ElseCondition} (=> "else" "{" then+=EXPRESSAO* "}");
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseCondition} (=> "else" "{" then+=EXPRESSAO* "}")
		public Group getGroup() { return cGroup; }
		
		//{ElseCondition}
		public Action getElseConditionAction_0() { return cElseConditionAction_0; }
		
		//=> "else" "{" then+=EXPRESSAO* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "else"
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//then+=EXPRESSAO*
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }
		
		//EXPRESSAO
		public RuleCall getThenEXPRESSAOParserRuleCall_1_2_0() { return cThenEXPRESSAOParserRuleCall_1_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BLOCK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLOCKAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListaDeComandosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListaDeComandosEXPRESSAOParserRuleCall_2_0 = (RuleCall)cListaDeComandosAssignment_2.eContents().get(0);
		private final Assignment cRetornoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRetornoReturnStmtParserRuleCall_3_0 = (RuleCall)cRetornoAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BLOCK:
		//	{BLOCK} "{" listaDeComandos+=EXPRESSAO* retorno=ReturnStmt? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{BLOCK} "{" listaDeComandos+=EXPRESSAO* retorno=ReturnStmt? "}"
		public Group getGroup() { return cGroup; }
		
		//{BLOCK}
		public Action getBLOCKAction_0() { return cBLOCKAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//listaDeComandos+=EXPRESSAO*
		public Assignment getListaDeComandosAssignment_2() { return cListaDeComandosAssignment_2; }
		
		//EXPRESSAO
		public RuleCall getListaDeComandosEXPRESSAOParserRuleCall_2_0() { return cListaDeComandosEXPRESSAOParserRuleCall_2_0; }
		
		//retorno=ReturnStmt?
		public Assignment getRetornoAssignment_3() { return cRetornoAssignment_3; }
		
		//ReturnStmt
		public RuleCall getRetornoReturnStmtParserRuleCall_3_0() { return cRetornoReturnStmtParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PARAMETERS_LISTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PARAMETERS_LIST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPARAMETERS_LISTAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsPARAMETERParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVirAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVirVIRGULATerminalRuleCall_2_0_0 = (RuleCall)cVirAssignment_2_0.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsPARAMETERParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		
		//PARAMETERS_LIST:
		//	{PARAMETERS_LIST} params+=PARAMETER (vir+=VIRGULA params+=PARAMETER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PARAMETERS_LIST} params+=PARAMETER (vir+=VIRGULA params+=PARAMETER)*
		public Group getGroup() { return cGroup; }
		
		//{PARAMETERS_LIST}
		public Action getPARAMETERS_LISTAction_0() { return cPARAMETERS_LISTAction_0; }
		
		//params+=PARAMETER
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//PARAMETER
		public RuleCall getParamsPARAMETERParserRuleCall_1_0() { return cParamsPARAMETERParserRuleCall_1_0; }
		
		//(vir+=VIRGULA params+=PARAMETER)*
		public Group getGroup_2() { return cGroup_2; }
		
		//vir+=VIRGULA
		public Assignment getVirAssignment_2_0() { return cVirAssignment_2_0; }
		
		//VIRGULA
		public RuleCall getVirVIRGULATerminalRuleCall_2_0_0() { return cVirVIRGULATerminalRuleCall_2_0_0; }
		
		//params+=PARAMETER
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//PARAMETER
		public RuleCall getParamsPARAMETERParserRuleCall_2_1_0() { return cParamsPARAMETERParserRuleCall_2_1_0; }
	}
	public class PARAMETERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PARAMETER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPARAMETERAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBasicoAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBasicoLITERAIS_BASICOSParserRuleCall_0_1_0 = (RuleCall)cBasicoAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cTipoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTipoTypesParserRuleCall_1_1_0 = (RuleCall)cTipoAssignment_1_1.eContents().get(0);
		
		//PARAMETER:
		//	{PARAMETER} basico=LITERAIS_BASICOS | id=Terminals::ID tipo=Types?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PARAMETER} basico=LITERAIS_BASICOS | id=Terminals::ID tipo=Types?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PARAMETER} basico=LITERAIS_BASICOS
		public Group getGroup_0() { return cGroup_0; }
		
		//{PARAMETER}
		public Action getPARAMETERAction_0_0() { return cPARAMETERAction_0_0; }
		
		//basico=LITERAIS_BASICOS
		public Assignment getBasicoAssignment_0_1() { return cBasicoAssignment_0_1; }
		
		//LITERAIS_BASICOS
		public RuleCall getBasicoLITERAIS_BASICOSParserRuleCall_0_1_0() { return cBasicoLITERAIS_BASICOSParserRuleCall_0_1_0; }
		
		//id=Terminals::ID tipo=Types?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//tipo=Types?
		public Assignment getTipoAssignment_1_1() { return cTipoAssignment_1_1; }
		
		//Types
		public RuleCall getTipoTypesParserRuleCall_1_1_0() { return cTipoTypesParserRuleCall_1_1_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBasicAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBasicBasicTypeParserRuleCall_0_1_0 = (RuleCall)cBasicAssignment_0_1.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArrayArrayTypeParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		//Types:
		//	{Types} basic=BasicType | array=ArrayType;
		@Override public ParserRule getRule() { return rule; }
		
		//{Types} basic=BasicType | array=ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Types} basic=BasicType
		public Group getGroup_0() { return cGroup_0; }
		
		//{Types}
		public Action getTypesAction_0_0() { return cTypesAction_0_0; }
		
		//basic=BasicType
		public Assignment getBasicAssignment_0_1() { return cBasicAssignment_0_1; }
		
		//BasicType
		public RuleCall getBasicBasicTypeParserRuleCall_0_1_0() { return cBasicBasicTypeParserRuleCall_0_1_0; }
		
		//array=ArrayType
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//ArrayType
		public RuleCall getArrayArrayTypeParserRuleCall_1_0() { return cArrayArrayTypeParserRuleCall_1_0; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQtdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQtdNUMEROTerminalRuleCall_1_0 = (RuleCall)cQtdAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBasicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBasicBasicTypeParserRuleCall_3_0 = (RuleCall)cBasicAssignment_3.eContents().get(0);
		
		//ArrayType:
		//	"[" qtd=NUMERO? "]" basic=BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" qtd=NUMERO? "]" basic=BasicType
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//qtd=NUMERO?
		public Assignment getQtdAssignment_1() { return cQtdAssignment_1; }
		
		//NUMERO
		public RuleCall getQtdNUMEROTerminalRuleCall_1_0() { return cQtdNUMEROTerminalRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//basic=BasicType
		public Assignment getBasicAssignment_3() { return cBasicAssignment_3; }
		
		//BasicType
		public RuleCall getBasicBasicTypeParserRuleCall_3_0() { return cBasicBasicTypeParserRuleCall_3_0; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringAssignment_0.eContents().get(0);
		private final Assignment cIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntAssignment_1.eContents().get(0);
		private final Assignment cFloatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cFloatFloatKeyword_2_0 = (Keyword)cFloatAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBoolKeyword_3_0 = (Keyword)cBooleanAssignment_3.eContents().get(0);
		
		//BasicType:
		//	string="string" | int="int" | float="float" | boolean="bool";
		@Override public ParserRule getRule() { return rule; }
		
		//string="string" | int="int" | float="float" | boolean="bool"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string="string"
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//int="int"
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }
		
		//"int"
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//float="float"
		public Assignment getFloatAssignment_2() { return cFloatAssignment_2; }
		
		//"float"
		public Keyword getFloatFloatKeyword_2_0() { return cFloatFloatKeyword_2_0; }
		
		//boolean="bool"
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//"bool"
		public Keyword getBooleanBoolKeyword_3_0() { return cBooleanBoolKeyword_3_0; }
	}
	public class VarCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarCall");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//VarCall:
		//	=> id=Terminals::ID;
		@Override public ParserRule getRule() { return rule; }
		
		//=> id=Terminals::ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsPARAMETERS_LISTParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	id=Terminals::ID "(" params=PARAMETERS_LIST? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//id=Terminals::ID "(" params=PARAMETERS_LIST? ")"
		public Group getGroup() { return cGroup; }
		
		//id=Terminals::ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Terminals::ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//params=PARAMETERS_LIST?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//PARAMETERS_LIST
		public RuleCall getParamsPARAMETERS_LISTParserRuleCall_2_0() { return cParamsPARAMETERS_LISTParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ChamadaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Chamada");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cChamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cChamFunctionCallParserRuleCall_0_0 = (RuleCall)cChamAssignment_0.eContents().get(0);
		private final Assignment cChamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cChamVarCallParserRuleCall_1_0 = (RuleCall)cChamAssignment_1.eContents().get(0);
		private final Assignment cChamAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cChamLITERAIS_BASICOSParserRuleCall_2_0 = (RuleCall)cChamAssignment_2.eContents().get(0);
		
		//Chamada:
		//	cham+=FunctionCall | cham+=VarCall | cham+=LITERAIS_BASICOS;
		@Override public ParserRule getRule() { return rule; }
		
		//cham+=FunctionCall | cham+=VarCall | cham+=LITERAIS_BASICOS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cham+=FunctionCall
		public Assignment getChamAssignment_0() { return cChamAssignment_0; }
		
		//FunctionCall
		public RuleCall getChamFunctionCallParserRuleCall_0_0() { return cChamFunctionCallParserRuleCall_0_0; }
		
		//cham+=VarCall
		public Assignment getChamAssignment_1() { return cChamAssignment_1; }
		
		//VarCall
		public RuleCall getChamVarCallParserRuleCall_1_0() { return cChamVarCallParserRuleCall_1_0; }
		
		//cham+=LITERAIS_BASICOS
		public Assignment getChamAssignment_2() { return cChamAssignment_2; }
		
		//LITERAIS_BASICOS
		public RuleCall getChamLITERAIS_BASICOSParserRuleCall_2_0() { return cChamLITERAIS_BASICOSParserRuleCall_2_0; }
	}
	public class BOOL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BOOL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBOOL_OPAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBOOL_OPAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BOOL_OP:
		//	{BOOL_OP} => '&&' | {BOOL_OP} => '||';
		@Override public ParserRule getRule() { return rule; }
		
		//{BOOL_OP} => '&&' | {BOOL_OP} => '||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BOOL_OP} => '&&'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BOOL_OP}
		public Action getBOOL_OPAction_0_0() { return cBOOL_OPAction_0_0; }
		
		//=> '&&'
		public Keyword getAmpersandAmpersandKeyword_0_1() { return cAmpersandAmpersandKeyword_0_1; }
		
		//{BOOL_OP} => '||'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BOOL_OP}
		public Action getBOOL_OPAction_1_0() { return cBOOL_OPAction_1_0; }
		
		//=> '||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
	}
	public class ARIT_EXPRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ARIT_EXPR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNum1Assignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cNum1NUMEROTerminalRuleCall_0_0_0_0 = (RuleCall)cNum1Assignment_0_0_0.eContents().get(0);
		private final Assignment cVar1Assignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cVar1VarCallParserRuleCall_0_0_1_0 = (RuleCall)cVar1Assignment_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpARIT_OPParserRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cNum2Assignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cNum2NUMEROTerminalRuleCall_0_2_0_0 = (RuleCall)cNum2Assignment_0_2_0.eContents().get(0);
		private final Assignment cVar2Assignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cVar2VarCallParserRuleCall_0_2_1_0 = (RuleCall)cVar2Assignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cNumAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNumNUMEROTerminalRuleCall_1_0_0_0 = (RuleCall)cNumAssignment_1_0_0.eContents().get(0);
		private final Assignment cVarAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cVarVarCallParserRuleCall_1_0_1_0 = (RuleCall)cVarAssignment_1_0_1.eContents().get(0);
		private final Assignment cAtrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAtrARIT_ATRParserRuleCall_1_1_0 = (RuleCall)cAtrAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cAtrAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAtrARIT_ATRParserRuleCall_2_0_0 = (RuleCall)cAtrAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNumAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNumNUMEROTerminalRuleCall_2_1_0_0 = (RuleCall)cNumAssignment_2_1_0.eContents().get(0);
		private final Assignment cVarAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cVarVarCallParserRuleCall_2_1_1_0 = (RuleCall)cVarAssignment_2_1_1.eContents().get(0);
		
		//ARIT_EXPR:
		//	(num1=NUMERO | var1=VarCall) op=ARIT_OP (num2=NUMERO | var2=VarCall) | (num=NUMERO | var=VarCall) atr=ARIT_ATR |
		//	atr=ARIT_ATR (num=NUMERO | var=VarCall);
		@Override public ParserRule getRule() { return rule; }
		
		//(num1=NUMERO | var1=VarCall) op=ARIT_OP (num2=NUMERO | var2=VarCall) | (num=NUMERO | var=VarCall) atr=ARIT_ATR |
		//atr=ARIT_ATR (num=NUMERO | var=VarCall)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(num1=NUMERO | var1=VarCall) op=ARIT_OP (num2=NUMERO | var2=VarCall)
		public Group getGroup_0() { return cGroup_0; }
		
		//num1=NUMERO | var1=VarCall
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//num1=NUMERO
		public Assignment getNum1Assignment_0_0_0() { return cNum1Assignment_0_0_0; }
		
		//NUMERO
		public RuleCall getNum1NUMEROTerminalRuleCall_0_0_0_0() { return cNum1NUMEROTerminalRuleCall_0_0_0_0; }
		
		//var1=VarCall
		public Assignment getVar1Assignment_0_0_1() { return cVar1Assignment_0_0_1; }
		
		//VarCall
		public RuleCall getVar1VarCallParserRuleCall_0_0_1_0() { return cVar1VarCallParserRuleCall_0_0_1_0; }
		
		//op=ARIT_OP
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//ARIT_OP
		public RuleCall getOpARIT_OPParserRuleCall_0_1_0() { return cOpARIT_OPParserRuleCall_0_1_0; }
		
		//num2=NUMERO | var2=VarCall
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//num2=NUMERO
		public Assignment getNum2Assignment_0_2_0() { return cNum2Assignment_0_2_0; }
		
		//NUMERO
		public RuleCall getNum2NUMEROTerminalRuleCall_0_2_0_0() { return cNum2NUMEROTerminalRuleCall_0_2_0_0; }
		
		//var2=VarCall
		public Assignment getVar2Assignment_0_2_1() { return cVar2Assignment_0_2_1; }
		
		//VarCall
		public RuleCall getVar2VarCallParserRuleCall_0_2_1_0() { return cVar2VarCallParserRuleCall_0_2_1_0; }
		
		//(num=NUMERO | var=VarCall) atr=ARIT_ATR
		public Group getGroup_1() { return cGroup_1; }
		
		//num=NUMERO | var=VarCall
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//num=NUMERO
		public Assignment getNumAssignment_1_0_0() { return cNumAssignment_1_0_0; }
		
		//NUMERO
		public RuleCall getNumNUMEROTerminalRuleCall_1_0_0_0() { return cNumNUMEROTerminalRuleCall_1_0_0_0; }
		
		//var=VarCall
		public Assignment getVarAssignment_1_0_1() { return cVarAssignment_1_0_1; }
		
		//VarCall
		public RuleCall getVarVarCallParserRuleCall_1_0_1_0() { return cVarVarCallParserRuleCall_1_0_1_0; }
		
		//atr=ARIT_ATR
		public Assignment getAtrAssignment_1_1() { return cAtrAssignment_1_1; }
		
		//ARIT_ATR
		public RuleCall getAtrARIT_ATRParserRuleCall_1_1_0() { return cAtrARIT_ATRParserRuleCall_1_1_0; }
		
		//atr=ARIT_ATR (num=NUMERO | var=VarCall)
		public Group getGroup_2() { return cGroup_2; }
		
		//atr=ARIT_ATR
		public Assignment getAtrAssignment_2_0() { return cAtrAssignment_2_0; }
		
		//ARIT_ATR
		public RuleCall getAtrARIT_ATRParserRuleCall_2_0_0() { return cAtrARIT_ATRParserRuleCall_2_0_0; }
		
		//num=NUMERO | var=VarCall
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//num=NUMERO
		public Assignment getNumAssignment_2_1_0() { return cNumAssignment_2_1_0; }
		
		//NUMERO
		public RuleCall getNumNUMEROTerminalRuleCall_2_1_0_0() { return cNumNUMEROTerminalRuleCall_2_1_0_0; }
		
		//var=VarCall
		public Assignment getVarAssignment_2_1_1() { return cVarAssignment_2_1_1; }
		
		//VarCall
		public RuleCall getVarVarCallParserRuleCall_2_1_1_0() { return cVarVarCallParserRuleCall_2_1_1_0; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfIfConditionParserRuleCall_0_0 = (RuleCall)cIfAssignment_0.eContents().get(0);
		private final Assignment cElseifAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseifElseIfConditionParserRuleCall_1_0 = (RuleCall)cElseifAssignment_1.eContents().get(0);
		private final Assignment cElseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElseElseConditionParserRuleCall_2_0 = (RuleCall)cElseAssignment_2.eContents().get(0);
		
		//IfStmt:
		//	if=IfCondition elseif+=ElseIfCondition* else=ElseCondition?;
		@Override public ParserRule getRule() { return rule; }
		
		//if=IfCondition elseif+=ElseIfCondition* else=ElseCondition?
		public Group getGroup() { return cGroup; }
		
		//if=IfCondition
		public Assignment getIfAssignment_0() { return cIfAssignment_0; }
		
		//IfCondition
		public RuleCall getIfIfConditionParserRuleCall_0_0() { return cIfIfConditionParserRuleCall_0_0; }
		
		//elseif+=ElseIfCondition*
		public Assignment getElseifAssignment_1() { return cElseifAssignment_1; }
		
		//ElseIfCondition
		public RuleCall getElseifElseIfConditionParserRuleCall_1_0() { return cElseifElseIfConditionParserRuleCall_1_0; }
		
		//else=ElseCondition?
		public Assignment getElseAssignment_2() { return cElseAssignment_2; }
		
		//ElseCondition
		public RuleCall getElseElseConditionParserRuleCall_2_0() { return cElseElseConditionParserRuleCall_2_0; }
	}
	public class ARIT_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ARIT_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ARIT_OP:
		//	'+' | '-' | '*' | '/' | '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_4() { return cCircumflexAccentKeyword_4; }
	}
	public class ARIT_ATRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ARIT_ATR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ARIT_ATR:
		//	"++" | "--";
		@Override public ParserRule getRule() { return rule; }
		
		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class COMPARISONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.COMPARISON");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIgualAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIgualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cIgualAssignment_0.eContents().get(0);
		private final Assignment cMaiorigualqueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMaiorigualqueGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cMaiorigualqueAssignment_1.eContents().get(0);
		private final Assignment cMenorigualqueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cMenorigualqueLessThanSignEqualsSignKeyword_2_0 = (Keyword)cMenorigualqueAssignment_2.eContents().get(0);
		private final Assignment cMaiorqueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cMaiorqueGreaterThanSignKeyword_3_0 = (Keyword)cMaiorqueAssignment_3.eContents().get(0);
		private final Assignment cMenorqueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cMenorqueLessThanSignKeyword_4_0 = (Keyword)cMenorqueAssignment_4.eContents().get(0);
		
		//COMPARISON:
		//	igual="==" | maiorigualque=">=" | menorigualque="<=" | maiorque=">" | menorque="<";
		@Override public ParserRule getRule() { return rule; }
		
		//igual="==" | maiorigualque=">=" | menorigualque="<=" | maiorque=">" | menorque="<"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//igual="=="
		public Assignment getIgualAssignment_0() { return cIgualAssignment_0; }
		
		//"=="
		public Keyword getIgualEqualsSignEqualsSignKeyword_0_0() { return cIgualEqualsSignEqualsSignKeyword_0_0; }
		
		//maiorigualque=">="
		public Assignment getMaiorigualqueAssignment_1() { return cMaiorigualqueAssignment_1; }
		
		//">="
		public Keyword getMaiorigualqueGreaterThanSignEqualsSignKeyword_1_0() { return cMaiorigualqueGreaterThanSignEqualsSignKeyword_1_0; }
		
		//menorigualque="<="
		public Assignment getMenorigualqueAssignment_2() { return cMenorigualqueAssignment_2; }
		
		//"<="
		public Keyword getMenorigualqueLessThanSignEqualsSignKeyword_2_0() { return cMenorigualqueLessThanSignEqualsSignKeyword_2_0; }
		
		//maiorque=">"
		public Assignment getMaiorqueAssignment_3() { return cMaiorqueAssignment_3; }
		
		//">"
		public Keyword getMaiorqueGreaterThanSignKeyword_3_0() { return cMaiorqueGreaterThanSignKeyword_3_0; }
		
		//menorque="<"
		public Assignment getMenorqueAssignment_4() { return cMenorqueAssignment_4; }
		
		//"<"
		public Keyword getMenorqueLessThanSignKeyword_4_0() { return cMenorqueLessThanSignKeyword_4_0; }
	}
	
	
	private final InitElements pInit;
	private final BOOLEAN_VALUEElements pBOOLEAN_VALUE;
	private final GoDeclElements pGoDecl;
	private final ForDeclElements pForDecl;
	private final RangeDeclElements pRangeDecl;
	private final ForClauseElements pForClause;
	private final InitStmtElements pInitStmt;
	private final PostStmtElements pPostStmt;
	private final ConditionElements pCondition;
	private final IDListElements pIDList;
	private final VarDeclElements pVarDecl;
	private final SignatureDelElements pSignatureDel;
	private final AssignmentElements pAssignment;
	private final TIPOElements pTIPO;
	private final VarElements pVar;
	private final ConstElements pConst;
	private final IGUALElements pIGUAL;
	private final PONTOSIGUALElements pPONTOSIGUAL;
	private final EXPRESSAOLINHAElements pEXPRESSAOLINHA;
	private final EXPRESSAOElements pEXPRESSAO;
	private final ReturnStmtElements pReturnStmt;
	private final ArrayValueElements pArrayValue;
	private final LiteraisListElements pLiteraisList;
	private final LITERAIS_BASICOSElements pLITERAIS_BASICOS;
	private final BINARY_EXPElements pBINARY_EXP;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ParametersElements pParameters;
	private final ABRE_PARENTESESElements pABRE_PARENTESES;
	private final FECHA_PARENTESESElements pFECHA_PARENTESES;
	private final IfConditionElements pIfCondition;
	private final ElseIfConditionElements pElseIfCondition;
	private final ElseConditionElements pElseCondition;
	private final BLOCKElements pBLOCK;
	private final PARAMETERS_LISTElements pPARAMETERS_LIST;
	private final PARAMETERElements pPARAMETER;
	private final TypesElements pTypes;
	private final ArrayTypeElements pArrayType;
	private final BasicTypeElements pBasicType;
	private final VarCallElements pVarCall;
	private final FunctionCallElements pFunctionCall;
	private final ChamadaElements pChamada;
	private final BOOL_OPElements pBOOL_OP;
	private final TerminalRule tVIRGULA;
	private final TerminalRule tNUMERO;
	private final TerminalRule tSTRING_DECL;
	private final ARIT_EXPRElements pARIT_EXPR;
	private final IfStmtElements pIfStmt;
	private final ARIT_OPElements pARIT_OP;
	private final ARIT_ATRElements pARIT_ATR;
	private final COMPARISONElements pCOMPARISON;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInit = new InitElements();
		this.pBOOLEAN_VALUE = new BOOLEAN_VALUEElements();
		this.pGoDecl = new GoDeclElements();
		this.pForDecl = new ForDeclElements();
		this.pRangeDecl = new RangeDeclElements();
		this.pForClause = new ForClauseElements();
		this.pInitStmt = new InitStmtElements();
		this.pPostStmt = new PostStmtElements();
		this.pCondition = new ConditionElements();
		this.pIDList = new IDListElements();
		this.pVarDecl = new VarDeclElements();
		this.pSignatureDel = new SignatureDelElements();
		this.pAssignment = new AssignmentElements();
		this.pTIPO = new TIPOElements();
		this.pVar = new VarElements();
		this.pConst = new ConstElements();
		this.pIGUAL = new IGUALElements();
		this.pPONTOSIGUAL = new PONTOSIGUALElements();
		this.pEXPRESSAOLINHA = new EXPRESSAOLINHAElements();
		this.pEXPRESSAO = new EXPRESSAOElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pArrayValue = new ArrayValueElements();
		this.pLiteraisList = new LiteraisListElements();
		this.pLITERAIS_BASICOS = new LITERAIS_BASICOSElements();
		this.pBINARY_EXP = new BINARY_EXPElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pParameters = new ParametersElements();
		this.pABRE_PARENTESES = new ABRE_PARENTESESElements();
		this.pFECHA_PARENTESES = new FECHA_PARENTESESElements();
		this.pIfCondition = new IfConditionElements();
		this.pElseIfCondition = new ElseIfConditionElements();
		this.pElseCondition = new ElseConditionElements();
		this.pBLOCK = new BLOCKElements();
		this.pPARAMETERS_LIST = new PARAMETERS_LISTElements();
		this.pPARAMETER = new PARAMETERElements();
		this.pTypes = new TypesElements();
		this.pArrayType = new ArrayTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pVarCall = new VarCallElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pChamada = new ChamadaElements();
		this.pBOOL_OP = new BOOL_OPElements();
		this.tVIRGULA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VIRGULA");
		this.tNUMERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.NUMERO");
		this.tSTRING_DECL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.STRING_DECL");
		this.pARIT_EXPR = new ARIT_EXPRElements();
		this.pIfStmt = new IfStmtElements();
		this.pARIT_OP = new ARIT_OPElements();
		this.pARIT_ATR = new ARIT_ATRElements();
		this.pCOMPARISON = new COMPARISONElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ufcg.compiladores.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Init:
	//	elements+=GoDecl*;
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//BOOLEAN_VALUE:
	//	=> verdadeiro="true" | => falso="false";
	public BOOLEAN_VALUEElements getBOOLEAN_VALUEAccess() {
		return pBOOLEAN_VALUE;
	}
	
	public ParserRule getBOOLEAN_VALUERule() {
		return getBOOLEAN_VALUEAccess().getRule();
	}
	
	//GoDecl:
	//	var=VarDecl | func=FunctionType | expressao=EXPRESSAOLINHA;
	public GoDeclElements getGoDeclAccess() {
		return pGoDecl;
	}
	
	public ParserRule getGoDeclRule() {
		return getGoDeclAccess().getRule();
	}
	
	//ForDecl:
	//	"for" (=> clause=ForClause | range=RangeDecl) "{" comandos=GoDecl? "}";
	public ForDeclElements getForDeclAccess() {
		return pForDecl;
	}
	
	public ParserRule getForDeclRule() {
		return getForDeclAccess().getRule();
	}
	
	//RangeDecl:
	//	{RangeDecl} idList+=IDList (igual=IGUAL | op=PONTOSIGUAL) "range" (variavel=VarCall | func=FunctionCall);
	public RangeDeclElements getRangeDeclAccess() {
		return pRangeDecl;
	}
	
	public ParserRule getRangeDeclRule() {
		return getRangeDeclAccess().getRule();
	}
	
	//ForClause:
	//	{ForClause} init=InitStmt? ";" condition=Condition? ";" post=PostStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//InitStmt:
	//	varDecl=VarDecl;
	public InitStmtElements getInitStmtAccess() {
		return pInitStmt;
	}
	
	public ParserRule getInitStmtRule() {
		return getInitStmtAccess().getRule();
	}
	
	//PostStmt:
	//	=> art=ARIT_EXPR;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	//Condition:
	//	expr1=EXPRESSAO comparador=COMPARISON expr2=EXPRESSAO;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//IDList:
	//	idList+=Terminals::ID | idList+=Terminals::ID vir+=VIRGULA list+=IDList;
	public IDListElements getIDListAccess() {
		return pIDList;
	}
	
	public ParserRule getIDListRule() {
		return getIDListAccess().getRule();
	}
	
	//VarDecl:
	//	signature=SignatureDel (atribuicao=IGUAL | pront=PONTOSIGUAL)? (array=ArrayType? expressao=EXPRESSAOLINHA)?;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//SignatureDel:
	//	tipoDecl=TIPO id=Terminals::ID type=Types?;
	public SignatureDelElements getSignatureDelAccess() {
		return pSignatureDel;
	}
	
	public ParserRule getSignatureDelRule() {
		return getSignatureDelAccess().getRule();
	}
	
	//Assignment:
	//	id=Terminals::ID ("[" qtd=NUMERO "]")? (igual=IGUAL | dois=PONTOSIGUAL) expressao=EXPRESSAOLINHA;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//TIPO:
	//	variavel=Var | constante=Const;
	public TIPOElements getTIPOAccess() {
		return pTIPO;
	}
	
	public ParserRule getTIPORule() {
		return getTIPOAccess().getRule();
	}
	
	//Var:
	//	var="var";
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Const:
	//	const="const";
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//IGUAL:
	//	igual="=";
	public IGUALElements getIGUALAccess() {
		return pIGUAL;
	}
	
	public ParserRule getIGUALRule() {
		return getIGUALAccess().getRule();
	}
	
	//PONTOSIGUAL:
	//	op=":=";
	public PONTOSIGUALElements getPONTOSIGUALAccess() {
		return pPONTOSIGUAL;
	}
	
	public ParserRule getPONTOSIGUALRule() {
		return getPONTOSIGUALAccess().getRule();
	}
	
	//EXPRESSAOLINHA:
	//	exp=EXPRESSAO explinha=EXPRESSAOLINHA | exp=EXPRESSAO;
	public EXPRESSAOLINHAElements getEXPRESSAOLINHAAccess() {
		return pEXPRESSAOLINHA;
	}
	
	public ParserRule getEXPRESSAOLINHARule() {
		return getEXPRESSAOLINHAAccess().getRule();
	}
	
	//EXPRESSAO:
	//	{EXPRESSAO} declFunction=FunctionType | binary_exp=BINARY_EXP | basic=LITERAIS_BASICOS | assignment=Assignment |
	//	for=ForDecl | arrayValue=ArrayValue | variaveis=VarDecl | cham=Chamada | if=IfStmt;
	public EXPRESSAOElements getEXPRESSAOAccess() {
		return pEXPRESSAO;
	}
	
	public ParserRule getEXPRESSAORule() {
		return getEXPRESSAOAccess().getRule();
	}
	
	//ReturnStmt:
	//	{ReturnStmt} "return" (basic=LITERAIS_BASICOS | func=FunctionCall | idVar=VarCall)?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//ArrayValue:
	//	"{" lit=LiteraisList "}";
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	//LiteraisList:
	//	lit+=LITERAIS_BASICOS | lit+=LITERAIS_BASICOS vir=VIRGULA lit+=LiteraisList;
	public LiteraisListElements getLiteraisListAccess() {
		return pLiteraisList;
	}
	
	public ParserRule getLiteraisListRule() {
		return getLiteraisListAccess().getRule();
	}
	
	//LITERAIS_BASICOS:
	//	numero=NUMERO | string=STRING_DECL | booleano=BOOLEAN_VALUE;
	public LITERAIS_BASICOSElements getLITERAIS_BASICOSAccess() {
		return pLITERAIS_BASICOS;
	}
	
	public ParserRule getLITERAIS_BASICOSRule() {
		return getLITERAIS_BASICOSAccess().getRule();
	}
	
	//BINARY_EXP:
	//	{BINARY_EXP} (basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall) (bool=BOOL_OP | arit=ARIT_OP)
	//	(basic+=LITERAIS_BASICOS | varCal+=VarCall | func+=FunctionCall);
	public BINARY_EXPElements getBINARY_EXPAccess() {
		return pBINARY_EXP;
	}
	
	public ParserRule getBINARY_EXPRule() {
		return getBINARY_EXPAccess().getRule();
	}
	
	//FunctionType:
	//	"func" nome=Terminals::ID assinatura=Signature bloco=BLOCK?;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	{Signature} params=Parameters retorno=Types?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Parameters:
	//	{Parameters} ABRE_PARENTESES params=PARAMETERS_LIST? FECHA_PARENTESES;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ABRE_PARENTESES:
	//	"(";
	public ABRE_PARENTESESElements getABRE_PARENTESESAccess() {
		return pABRE_PARENTESES;
	}
	
	public ParserRule getABRE_PARENTESESRule() {
		return getABRE_PARENTESESAccess().getRule();
	}
	
	//FECHA_PARENTESES:
	//	")";
	public FECHA_PARENTESESElements getFECHA_PARENTESESAccess() {
		return pFECHA_PARENTESES;
	}
	
	public ParserRule getFECHA_PARENTESESRule() {
		return getFECHA_PARENTESESAccess().getRule();
	}
	
	//IfCondition:
	//	"if" cond=Condition "{" then+=EXPRESSAO* "}";
	public IfConditionElements getIfConditionAccess() {
		return pIfCondition;
	}
	
	public ParserRule getIfConditionRule() {
		return getIfConditionAccess().getRule();
	}
	
	//ElseIfCondition:
	//	=> "else" IfCondition;
	public ElseIfConditionElements getElseIfConditionAccess() {
		return pElseIfCondition;
	}
	
	public ParserRule getElseIfConditionRule() {
		return getElseIfConditionAccess().getRule();
	}
	
	//ElseCondition:
	//	{ElseCondition} (=> "else" "{" then+=EXPRESSAO* "}");
	public ElseConditionElements getElseConditionAccess() {
		return pElseCondition;
	}
	
	public ParserRule getElseConditionRule() {
		return getElseConditionAccess().getRule();
	}
	
	//BLOCK:
	//	{BLOCK} "{" listaDeComandos+=EXPRESSAO* retorno=ReturnStmt? "}";
	public BLOCKElements getBLOCKAccess() {
		return pBLOCK;
	}
	
	public ParserRule getBLOCKRule() {
		return getBLOCKAccess().getRule();
	}
	
	//PARAMETERS_LIST:
	//	{PARAMETERS_LIST} params+=PARAMETER (vir+=VIRGULA params+=PARAMETER)*;
	public PARAMETERS_LISTElements getPARAMETERS_LISTAccess() {
		return pPARAMETERS_LIST;
	}
	
	public ParserRule getPARAMETERS_LISTRule() {
		return getPARAMETERS_LISTAccess().getRule();
	}
	
	//PARAMETER:
	//	{PARAMETER} basico=LITERAIS_BASICOS | id=Terminals::ID tipo=Types?;
	public PARAMETERElements getPARAMETERAccess() {
		return pPARAMETER;
	}
	
	public ParserRule getPARAMETERRule() {
		return getPARAMETERAccess().getRule();
	}
	
	//Types:
	//	{Types} basic=BasicType | array=ArrayType;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//ArrayType:
	//	"[" qtd=NUMERO? "]" basic=BasicType;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//BasicType:
	//	string="string" | int="int" | float="float" | boolean="bool";
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//VarCall:
	//	=> id=Terminals::ID;
	public VarCallElements getVarCallAccess() {
		return pVarCall;
	}
	
	public ParserRule getVarCallRule() {
		return getVarCallAccess().getRule();
	}
	
	//FunctionCall:
	//	id=Terminals::ID "(" params=PARAMETERS_LIST? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Chamada:
	//	cham+=FunctionCall | cham+=VarCall | cham+=LITERAIS_BASICOS;
	public ChamadaElements getChamadaAccess() {
		return pChamada;
	}
	
	public ParserRule getChamadaRule() {
		return getChamadaAccess().getRule();
	}
	
	//BOOL_OP:
	//	{BOOL_OP} => '&&' | {BOOL_OP} => '||';
	public BOOL_OPElements getBOOL_OPAccess() {
		return pBOOL_OP;
	}
	
	public ParserRule getBOOL_OPRule() {
		return getBOOL_OPAccess().getRule();
	}
	
	//terminal VIRGULA:
	//	",";
	public TerminalRule getVIRGULARule() {
		return tVIRGULA;
	}
	
	//terminal NUMERO:
	//	Terminals::INT;
	public TerminalRule getNUMERORule() {
		return tNUMERO;
	}
	
	//terminal STRING_DECL:
	//	'"' (Terminals::ID | NUMERO)* '"';
	public TerminalRule getSTRING_DECLRule() {
		return tSTRING_DECL;
	}
	
	//ARIT_EXPR:
	//	(num1=NUMERO | var1=VarCall) op=ARIT_OP (num2=NUMERO | var2=VarCall) | (num=NUMERO | var=VarCall) atr=ARIT_ATR |
	//	atr=ARIT_ATR (num=NUMERO | var=VarCall);
	public ARIT_EXPRElements getARIT_EXPRAccess() {
		return pARIT_EXPR;
	}
	
	public ParserRule getARIT_EXPRRule() {
		return getARIT_EXPRAccess().getRule();
	}
	
	//IfStmt:
	//	if=IfCondition elseif+=ElseIfCondition* else=ElseCondition?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//ARIT_OP:
	//	'+' | '-' | '*' | '/' | '^';
	public ARIT_OPElements getARIT_OPAccess() {
		return pARIT_OP;
	}
	
	public ParserRule getARIT_OPRule() {
		return getARIT_OPAccess().getRule();
	}
	
	//ARIT_ATR:
	//	"++" | "--";
	public ARIT_ATRElements getARIT_ATRAccess() {
		return pARIT_ATR;
	}
	
	public ParserRule getARIT_ATRRule() {
		return getARIT_ATRAccess().getRule();
	}
	
	//COMPARISON:
	//	igual="==" | maiorigualque=">=" | menorigualque="<=" | maiorque=">" | menorque="<";
	public COMPARISONElements getCOMPARISONAccess() {
		return pCOMPARISON;
	}
	
	public ParserRule getCOMPARISONRule() {
		return getCOMPARISONAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
