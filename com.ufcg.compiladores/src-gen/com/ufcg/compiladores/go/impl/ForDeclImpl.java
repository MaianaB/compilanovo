/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.ForClause;
import com.ufcg.compiladores.go.ForDecl;
import com.ufcg.compiladores.go.GoDecl;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.RangeDecl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForDeclImpl#getClause <em>Clause</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForDeclImpl#getRange <em>Range</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForDeclImpl#getComandos <em>Comandos</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForDeclImpl extends MinimalEObjectImpl.Container implements ForDecl
{
  /**
   * The cached value of the '{@link #getClause() <em>Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClause()
   * @generated
   * @ordered
   */
  protected ForClause clause;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected RangeDecl range;

  /**
   * The cached value of the '{@link #getComandos() <em>Comandos</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComandos()
   * @generated
   * @ordered
   */
  protected GoDecl comandos;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.FOR_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForClause getClause()
  {
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClause(ForClause newClause, NotificationChain msgs)
  {
    ForClause oldClause = clause;
    clause = newClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__CLAUSE, oldClause, newClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClause(ForClause newClause)
  {
    if (newClause != clause)
    {
      NotificationChain msgs = null;
      if (clause != null)
        msgs = ((InternalEObject)clause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__CLAUSE, null, msgs);
      if (newClause != null)
        msgs = ((InternalEObject)newClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__CLAUSE, null, msgs);
      msgs = basicSetClause(newClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__CLAUSE, newClause, newClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RangeDecl getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRange(RangeDecl newRange, NotificationChain msgs)
  {
    RangeDecl oldRange = range;
    range = newRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__RANGE, oldRange, newRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRange(RangeDecl newRange)
  {
    if (newRange != range)
    {
      NotificationChain msgs = null;
      if (range != null)
        msgs = ((InternalEObject)range).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__RANGE, null, msgs);
      if (newRange != null)
        msgs = ((InternalEObject)newRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__RANGE, null, msgs);
      msgs = basicSetRange(newRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__RANGE, newRange, newRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoDecl getComandos()
  {
    return comandos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComandos(GoDecl newComandos, NotificationChain msgs)
  {
    GoDecl oldComandos = comandos;
    comandos = newComandos;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__COMANDOS, oldComandos, newComandos);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComandos(GoDecl newComandos)
  {
    if (newComandos != comandos)
    {
      NotificationChain msgs = null;
      if (comandos != null)
        msgs = ((InternalEObject)comandos).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__COMANDOS, null, msgs);
      if (newComandos != null)
        msgs = ((InternalEObject)newComandos).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_DECL__COMANDOS, null, msgs);
      msgs = basicSetComandos(newComandos, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_DECL__COMANDOS, newComandos, newComandos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.FOR_DECL__CLAUSE:
        return basicSetClause(null, msgs);
      case GoPackage.FOR_DECL__RANGE:
        return basicSetRange(null, msgs);
      case GoPackage.FOR_DECL__COMANDOS:
        return basicSetComandos(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.FOR_DECL__CLAUSE:
        return getClause();
      case GoPackage.FOR_DECL__RANGE:
        return getRange();
      case GoPackage.FOR_DECL__COMANDOS:
        return getComandos();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.FOR_DECL__CLAUSE:
        setClause((ForClause)newValue);
        return;
      case GoPackage.FOR_DECL__RANGE:
        setRange((RangeDecl)newValue);
        return;
      case GoPackage.FOR_DECL__COMANDOS:
        setComandos((GoDecl)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_DECL__CLAUSE:
        setClause((ForClause)null);
        return;
      case GoPackage.FOR_DECL__RANGE:
        setRange((RangeDecl)null);
        return;
      case GoPackage.FOR_DECL__COMANDOS:
        setComandos((GoDecl)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_DECL__CLAUSE:
        return clause != null;
      case GoPackage.FOR_DECL__RANGE:
        return range != null;
      case GoPackage.FOR_DECL__COMANDOS:
        return comandos != null;
    }
    return super.eIsSet(featureID);
  }

} //ForDeclImpl
