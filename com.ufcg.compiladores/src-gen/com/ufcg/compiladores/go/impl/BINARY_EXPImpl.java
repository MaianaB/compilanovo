/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.BINARY_EXP;
import com.ufcg.compiladores.go.BOOL_OP;
import com.ufcg.compiladores.go.FunctionCall;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.LITERAIS_BASICOS;
import com.ufcg.compiladores.go.VarCall;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BINARY EXP</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.BINARY_EXPImpl#getBasic <em>Basic</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.BINARY_EXPImpl#getVarCal <em>Var Cal</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.BINARY_EXPImpl#getFunc <em>Func</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.BINARY_EXPImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.BINARY_EXPImpl#getArit <em>Arit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BINARY_EXPImpl extends MinimalEObjectImpl.Container implements BINARY_EXP
{
  /**
   * The cached value of the '{@link #getBasic() <em>Basic</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasic()
   * @generated
   * @ordered
   */
  protected EList<LITERAIS_BASICOS> basic;

  /**
   * The cached value of the '{@link #getVarCal() <em>Var Cal</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarCal()
   * @generated
   * @ordered
   */
  protected EList<VarCall> varCal;

  /**
   * The cached value of the '{@link #getFunc() <em>Func</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunc()
   * @generated
   * @ordered
   */
  protected EList<FunctionCall> func;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected BOOL_OP bool;

  /**
   * The default value of the '{@link #getArit() <em>Arit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArit()
   * @generated
   * @ordered
   */
  protected static final String ARIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArit() <em>Arit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArit()
   * @generated
   * @ordered
   */
  protected String arit = ARIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BINARY_EXPImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.BINARY_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LITERAIS_BASICOS> getBasic()
  {
    if (basic == null)
    {
      basic = new EObjectContainmentEList<LITERAIS_BASICOS>(LITERAIS_BASICOS.class, this, GoPackage.BINARY_EXP__BASIC);
    }
    return basic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VarCall> getVarCal()
  {
    if (varCal == null)
    {
      varCal = new EObjectContainmentEList<VarCall>(VarCall.class, this, GoPackage.BINARY_EXP__VAR_CAL);
    }
    return varCal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FunctionCall> getFunc()
  {
    if (func == null)
    {
      func = new EObjectContainmentEList<FunctionCall>(FunctionCall.class, this, GoPackage.BINARY_EXP__FUNC);
    }
    return func;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL_OP getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBool(BOOL_OP newBool, NotificationChain msgs)
  {
    BOOL_OP oldBool = bool;
    bool = newBool;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BOOL, oldBool, newBool);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBool(BOOL_OP newBool)
  {
    if (newBool != bool)
    {
      NotificationChain msgs = null;
      if (bool != null)
        msgs = ((InternalEObject)bool).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BOOL, null, msgs);
      if (newBool != null)
        msgs = ((InternalEObject)newBool).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.BINARY_EXP__BOOL, null, msgs);
      msgs = basicSetBool(newBool, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__BOOL, newBool, newBool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getArit()
  {
    return arit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArit(String newArit)
  {
    String oldArit = arit;
    arit = newArit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.BINARY_EXP__ARIT, oldArit, arit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return ((InternalEList<?>)getBasic()).basicRemove(otherEnd, msgs);
      case GoPackage.BINARY_EXP__VAR_CAL:
        return ((InternalEList<?>)getVarCal()).basicRemove(otherEnd, msgs);
      case GoPackage.BINARY_EXP__FUNC:
        return ((InternalEList<?>)getFunc()).basicRemove(otherEnd, msgs);
      case GoPackage.BINARY_EXP__BOOL:
        return basicSetBool(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return getBasic();
      case GoPackage.BINARY_EXP__VAR_CAL:
        return getVarCal();
      case GoPackage.BINARY_EXP__FUNC:
        return getFunc();
      case GoPackage.BINARY_EXP__BOOL:
        return getBool();
      case GoPackage.BINARY_EXP__ARIT:
        return getArit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        getBasic().clear();
        getBasic().addAll((Collection<? extends LITERAIS_BASICOS>)newValue);
        return;
      case GoPackage.BINARY_EXP__VAR_CAL:
        getVarCal().clear();
        getVarCal().addAll((Collection<? extends VarCall>)newValue);
        return;
      case GoPackage.BINARY_EXP__FUNC:
        getFunc().clear();
        getFunc().addAll((Collection<? extends FunctionCall>)newValue);
        return;
      case GoPackage.BINARY_EXP__BOOL:
        setBool((BOOL_OP)newValue);
        return;
      case GoPackage.BINARY_EXP__ARIT:
        setArit((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        getBasic().clear();
        return;
      case GoPackage.BINARY_EXP__VAR_CAL:
        getVarCal().clear();
        return;
      case GoPackage.BINARY_EXP__FUNC:
        getFunc().clear();
        return;
      case GoPackage.BINARY_EXP__BOOL:
        setBool((BOOL_OP)null);
        return;
      case GoPackage.BINARY_EXP__ARIT:
        setArit(ARIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.BINARY_EXP__BASIC:
        return basic != null && !basic.isEmpty();
      case GoPackage.BINARY_EXP__VAR_CAL:
        return varCal != null && !varCal.isEmpty();
      case GoPackage.BINARY_EXP__FUNC:
        return func != null && !func.isEmpty();
      case GoPackage.BINARY_EXP__BOOL:
        return bool != null;
      case GoPackage.BINARY_EXP__ARIT:
        return ARIT_EDEFAULT == null ? arit != null : !ARIT_EDEFAULT.equals(arit);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (arit: ");
    result.append(arit);
    result.append(')');
    return result.toString();
  }

} //BINARY_EXPImpl
